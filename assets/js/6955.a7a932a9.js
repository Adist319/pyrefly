"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[6955],{35363:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var i=t(9136),s=t(74848);function r(e){let{children:n,fallback:t}=e;return(0,i.default)()?(0,s.jsx)(s.Fragment,{children:n?.()}):t??null}},56955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"python-typing-for-beginners","title":"Python Typing for Beginners","description":"A gentle, example\u2011driven introduction to static type hints in Python.","source":"@site/docs/python-typing-for-beginners.mdx","sourceDirName":".","slug":"/python-typing-for-beginners","permalink":"/en/docs/python-typing-for-beginners","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/python-typing-for-beginners.mdx","tags":[],"version":"current","frontMatter":{"id":"python-typing-for-beginners","title":"Python Typing for Beginners","description":"A gentle, example\u2011driven introduction to static type hints in Python."},"sidebar":"docsSidebar","previous":{"title":"Typing for Python Developers","permalink":"/en/docs/python-typing-5-minutes"},"next":{"title":"Installation","permalink":"/en/docs/installation"}}');var s=t(74848),r=t(28453),o=t(81517);const l={id:"python-typing-for-beginners",title:"Python Typing for Beginners",description:"A gentle, example\u2011driven introduction to static type hints in Python."},a="Python Types for Python Beginners",h={},d=[{value:"1. What is a Type Hint in Python?",id:"1-what-is-a-type-hint-in-python",level:2},{value:"2. Why Bother with Type Hints?",id:"2-why-bother-with-type-hints",level:2},{value:"Can you spot the bug?",id:"can-you-spot-the-bug",level:3},{value:"3. Primitive Types",id:"3-primitive-types",level:2},{value:"4. Collections",id:"4-collections",level:2},{value:"Syntax\tExamples",id:"syntaxexamples",level:3},{value:"5. Functions",id:"5-functions",level:2},{value:"5. Get Type Hint Signals Directly in Your Editor",id:"5-get-type-hint-signals-directly-in-your-editor",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"python-types-for-python-beginners",children:"Python Types for Python Beginners"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"A beginner\u2011friendly guide to adding type hints in Python."})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note:"})," This tutorial assumes you understand some basic Python syntax, but are new to type hints. To learn more about Python, see the ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/tutorial/",children:"Python Tutorial"})," and ",(0,s.jsx)(n.a,{href:"https://www.python.org/about/gettingstarted/",children:"Getting Started Guide"})]}),"\n",(0,s.jsx)(n.h2,{id:"1-what-is-a-type-hint-in-python",children:"1. What is a Type Hint in Python?"}),"\n",(0,s.jsx)(n.p,{children:"A type hint in Python is a way to indicate the expected data type of a variable, function parameter, or return value. It's a hint to other developers (and to tools like type checkers and IDEs) about what type of data should be used with a particular piece of code."}),"\n",(0,s.jsxs)(n.p,{children:["Type hints are ",(0,s.jsx)(n.strong,{children:"not enforced at runtime by Python itself,"})," but they can be used by third-party tools (like Pyrefly) to catch type-related errors before your code runs. They also serve as documentation, making it easier for others to understand how to use your code.\nHere's an example of a simple function with type hints:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'def greet(name: str) -> None:\n    print(f"Hello, {name}!")\n'})}),"\n",(0,s.jsx)(n.h2,{id:"2-why-bother-with-type-hints",children:"2. Why Bother with Type Hints?"}),"\n",(0,s.jsx)(n.p,{children:"Python is a dynamically typed language, which means you can write code without declaring types. However, this can lead to bugs or ambiguity in your code."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"TL;DR"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Catch bugs ",(0,s.jsx)(n.strong,{children:"before"})," running the code."]}),"\n",(0,s.jsx)(n.li,{children:"Improve editor autocomplete & refactors."}),"\n",(0,s.jsx)(n.li,{children:"Turn your code into living documentation."}),"\n"]}),"\n",(0,s.jsx)("pre",{children:(0,s.jsx)(o.A,{sampleFilename:"why_hints.py",isCodeSnippet:!0,codeSample:'# Without hints \u2013 is "times" a str, int, or list?\ndef repeat(text, times):\n  return text * times\n\n# With hints \u2013 intent is crystal clear.\ndef repeat(text: str, times: int) -> str:\n  return text * times\n'})}),"\n",(0,s.jsx)(n.h3,{id:"can-you-spot-the-bug",children:"Can you spot the bug?"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"class Rectangle:\n    width: int\n    height: int\n\n    def __init__(self, width: int, height: int) -> None:\n        self.width = width\n        self.height = height\n\nrect = Rectangle(width=100, height=50)\n\narea = rect.width * rect.hieght\n\nprint(area)\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Spelling is hard!"})," Let's add the ",(0,s.jsx)(n.code,{children:"dataclass"})," decorator to our class definition. This will generate a constructor for us, and also add a few other useful methods."]}),"\n",(0,s.jsx)("pre",{children:(0,s.jsx)(o.A,{sampleFilename:"misspelled.py",isCodeSnippet:!0,codeSample:"#Pyrefly will catch this spelling error before you run the code\nfrom dataclasses import dataclass\n\n@dataclass\nclass Rectangle:\n  width: int\n  height: int\n\nrect = Rectangle(width=100, height=50)\n\narea = rect.width * rect.hieght\n"})}),"\n",(0,s.jsx)(n.h2,{id:"3-primitive-types",children:"3. Primitive Types"}),"\n",(0,s.jsxs)(n.p,{children:["Since Python 3.9 you can use all the ",(0,s.jsx)(n.a,{href:"https://docs.python.org/3/library/stdtypes.html",children:"primitive types"})," directly as annotations."]}),"\n",(0,s.jsx)("pre",{children:(0,s.jsx)(o.A,{sampleFilename:"primitives_types.py",isCodeSnippet:!0,codeSample:'age: int = 30\nheight: float = 1.85\nname: str = "Tyler Typer"\nis_admin: bool = False\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can also specify a parameter as optional by using ",(0,s.jsx)(n.code,{children:"Optional"})," type, or now with the ",(0,s.jsx)(n.code,{children:"| None"})," syntax."]}),"\n",(0,s.jsx)("pre",{children:(0,s.jsx)(o.A,{sampleFilename:"primitive2_types.py",isCodeSnippet:!0,codeSample:"# Optional typing example\n\nfrom typing import Optional\n\nmiddle_name: Optional[str] = None        # classic\nnickname: str | None = None              # 3.10+ shorthand\n"})}),"\n",(0,s.jsx)(n.h2,{id:"4-collections",children:"4. Collections"}),"\n",(0,s.jsx)(n.h3,{id:"syntaxexamples",children:"Syntax\tExamples"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["List of numbers\t",(0,s.jsx)(n.code,{children:"list[int]\tscores: list[int] = [98, 87, 91]"})]}),"\n",(0,s.jsxs)(n.li,{children:["Tuple of two floats\t",(0,s.jsx)(n.code,{children:"tuple[float, float]\tpoint: tuple[float, float] = (3.0, 4.0)"})]}),"\n",(0,s.jsxs)(n.li,{children:["Dict of str -> int\t",(0,s.jsx)(n.code,{children:'dict[str, int]\tinventory: dict[str, int] = {"apples": 5}'})]}),"\n",(0,s.jsxs)(n.li,{children:["Set of strings\t",(0,s.jsx)(n.code,{children:'set[str]\tauthors: set[str] = {"Bob", "Eve"}'})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Since Python 3.9 you can subscript built\u2011ins directly\u2014no need for ",(0,s.jsx)(n.code,{children:"from typing import List"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"5-functions",children:"5. Functions"}),"\n",(0,s.jsx)("pre",{children:(0,s.jsx)(o.A,{sampleFilename:"basic_function_types.py",isCodeSnippet:!0,codeSample:"# Simple function\ndef add(a: int, b: int) -> int:\n  return a + b\n"})}),"\n",(0,s.jsx)(n.p,{children:"Default values keep their annotation:"}),"\n",(0,s.jsx)("pre",{children:(0,s.jsx)(o.A,{sampleFilename:"defaul_value_types.py",isCodeSnippet:!0,codeSample:'# Function with default value\n\n\ndef greet(name: str, polite: bool = True) -> str:\n  return "Hello!" if polite else f"Yo {name}"\n  '})}),"\n",(0,s.jsx)(n.p,{children:"Variable\u2011length arguments:"}),"\n",(0,s.jsx)("pre",{children:(0,s.jsx)(o.A,{sampleFilename:"variable_length_types.py",isCodeSnippet:!0,codeSample:"# Variable length functions\nfrom collections.abc import Callable\n\nLogger = Callable[[str], None]\n\ndef debug(*msgs: str, log: Logger | None = print) -> None:\nfor m in msgs:\n  if log is not None:\n    log(m)\n  else:\n    print(m)\n  "})}),"\n",(0,s.jsx)(n.h2,{id:"5-get-type-hint-signals-directly-in-your-editor",children:"5. Get Type Hint Signals Directly in Your Editor"}),"\n",(0,s.jsxs)(n.p,{children:["You can download the ",(0,s.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=meta.pyrefly",children:"Pyrefly extension for VSCode"})," to get type hint signals directly in your IDE."]}),"\n",(0,s.jsxs)(n.p,{children:["Next, install ",(0,s.jsx)(n.a,{href:"../installation/",children:"Pyrefly"})," and check some code:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"# Fast, zero\u2011config\npip install pyrefly\n\npyrefly check ./my_sample.py\n\n# Check whole directories\npyrefly check app/ tests/\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.code,{children:"pyrefly.toml"})," file to configure your project. Instructions ",(0,s.jsx)(n.a,{href:"../configuration",children:"here"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},81517:(e,n,t)=>{t.d(n,{A:()=>l});var i=t(35363),s=t(96540),r=t(74848);const o=s.lazy((()=>Promise.all([t.e(1869),t.e(571),t.e(2179)]).then(t.bind(t,2179))));function l(e){let{sampleFilename:n,isCodeSnippet:t=!1,codeSample:l=""}=e;if(null==n)throw"Missing sampleFilename. IDE services won't work properly.";return(0,r.jsx)(i.A,{children:()=>(0,r.jsx)(s.Suspense,{fallback:(0,r.jsx)("div",{children:"Loading..."}),children:(0,r.jsx)(o,{sampleFilename:n,isCodeSnippet:t,codeSample:l})})})}}}]);