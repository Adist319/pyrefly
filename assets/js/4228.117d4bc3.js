"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[4228],{15680:(e,n,i)=>{i.r(n),i.d(n,{MDXContext:()=>p,MDXProvider:()=>s,mdx:()=>y,useMDXComponents:()=>u,withMDXComponents:()=>d});var t=i(96540);function a(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var i=arguments[n];for(var t in i)Object.prototype.hasOwnProperty.call(i,t)&&(e[t]=i[t])}return e},r.apply(this,arguments)}function o(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?o(Object(i),!0).forEach((function(n){a(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function m(e,n){if(null==e)return{};var i,t,a=function(e,n){if(null==e)return{};var i,t,a={},r=Object.keys(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||(a[i]=e[i]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)i=r[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var p=t.createContext({}),d=function(e){return function(n){var i=u(n.components);return t.createElement(e,r({},n,{components:i}))}},u=function(e){var n=t.useContext(p),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},s=function(e){var n=u(e.components);return t.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var i=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),d=u(i),s=a,f=d["".concat(o,".").concat(s)]||d[s]||c[s]||r;return i?t.createElement(f,l(l({ref:n},p),{},{components:i})):t.createElement(f,l({ref:n},p))}));function y(e,n){var i=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=f;var l={};for(var m in n)hasOwnProperty.call(n,m)&&(l[m]=n[m]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=i[p];return t.createElement.apply(null,o)}return t.createElement.apply(null,i)}f.displayName="MDXCreateElement"},24228:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var t=i(58168),a=(i(96540),i(15680));const r={id:"configuration",title:"Configuration",slug:"/configuration",description:"Instructions for configuring Pyrefly"},o="Pyrefly Configuration",l={unversionedId:"configuration",id:"configuration",title:"Configuration",description:"Instructions for configuring Pyrefly",source:"@site/docs/configuration.md",sourceDirName:".",slug:"/configuration",permalink:"/en/docs/configuration",draft:!1,editUrl:"https://github.com/facebook/pyrefly/edit/main/website/docs/configuration.md",tags:[],version:"current",frontMatter:{id:"configuration",title:"Configuration",slug:"/configuration",description:"Instructions for configuring Pyrefly"}},m={},p=[{value:"Precedence in Options",id:"precedence-in-options",level:2}],d={toc:p};function u(e){let{components:n,...i}=e;return(0,a.mdx)("wrapper",(0,t.A)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"pyrefly-configuration"},"Pyrefly Configuration"),(0,a.mdx)("p",null,"Pyrefly has a basic configuration that can (or will) allow you to customize your\nPyrefly runs without having to specify all of your arguments on the command\nline."),(0,a.mdx)("p",null,"NOTE: this is early in its development, so the options listed here are subject\nto change in name, usage, type, quantity, and structure."),(0,a.mdx)("p",null,"Configurations can be specified in a ",(0,a.mdx)("inlineCode",{parentName:"p"},"pyre.toml")," file, with all configuration\noptions in the top-level of the document. You can also specify a configuration\nin a ",(0,a.mdx)("inlineCode",{parentName:"p"},"pyproject.toml")," under a ",(0,a.mdx)("inlineCode",{parentName:"p"},"[tool.pyrefly]")," section."),(0,a.mdx)("p",null,"NOTE: At the moment, configuration finding is not supported. It will be\nimplemented in the near future. In the meantime, please explicitly specify your\nconfiguration with the ",(0,a.mdx)("inlineCode",{parentName:"p"},"-c <config>")," or ",(0,a.mdx)("inlineCode",{parentName:"p"},"--config <config>")," flags when running\nPyrefly."),(0,a.mdx)("p",null,"Both absolute and config-relative paths are supported."),(0,a.mdx)("h2",{id:"precedence-in-options"},"Precedence in Options"),(0,a.mdx)("p",null,"The following is the order in which configuration options are selected:"),(0,a.mdx)("ol",null,(0,a.mdx)("li",{parentName:"ol"},"CLI flag"),(0,a.mdx)("li",{parentName:"ol"},"Environment variable override -- This is the same as ",(0,a.mdx)("inlineCode",{parentName:"li"},"PYRE_<CLI flag name>")),(0,a.mdx)("li",{parentName:"ol"},"Configuration option"),(0,a.mdx)("li",{parentName:"ol"},"Hard-coded default")),(0,a.mdx)("h1",{id:"configuration-options"},"Configuration Options"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"project_includes"),": the patterns used to describe which files to type check,\ntypically understood as user-space files. This takes highest precedence in\nimport resolution.",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"Type: list of Unix Glob patterns"),(0,a.mdx)("li",{parentName:"ul"},"Default: ",(0,a.mdx)("inlineCode",{parentName:"li"},'["./**/*.py"]')),(0,a.mdx)("li",{parentName:"ul"},"Flag equivalent: Equivalent to ",(0,a.mdx)("inlineCode",{parentName:"li"},"FILES...")),(0,a.mdx)("li",{parentName:"ul"},"Equivalent Configs: ",(0,a.mdx)("inlineCode",{parentName:"li"},"include")," in Pyright, ",(0,a.mdx)("inlineCode",{parentName:"li"},"files"),"/",(0,a.mdx)("inlineCode",{parentName:"li"},"modules"),"/",(0,a.mdx)("inlineCode",{parentName:"li"},"packages")," in\nMyPy"))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"search_path"),": a file path describing a root from which imports should be\nfound and imported from (including modules in ",(0,a.mdx)("inlineCode",{parentName:"li"},"project_includes"),"). This takes\nthe highest precedence in import order, before ",(0,a.mdx)("inlineCode",{parentName:"li"},"typeshed")," and\n",(0,a.mdx)("inlineCode",{parentName:"li"},"site_package_path"),". When a ",(0,a.mdx)("inlineCode",{parentName:"li"},"project_includes")," type checked file is imported\nby another type checked file, we check all search roots to determine how to\nimport it.",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"Type: list of directories"),(0,a.mdx)("li",{parentName:"ul"},"Default: ",(0,a.mdx)("inlineCode",{parentName:"li"},'["."]')),(0,a.mdx)("li",{parentName:"ul"},"Flag equivalent: ",(0,a.mdx)("inlineCode",{parentName:"li"},"--search-path")),(0,a.mdx)("li",{parentName:"ul"},"ENV equivalent: ",(0,a.mdx)("inlineCode",{parentName:"li"},"PYRE_SEARCH_PATH")),(0,a.mdx)("li",{parentName:"ul"},"Equivalent Configs: ",(0,a.mdx)("inlineCode",{parentName:"li"},"extraPaths")," in Pyright, ",(0,a.mdx)("inlineCode",{parentName:"li"},"mypy_path")," in MyPy"),(0,a.mdx)("li",{parentName:"ul"},"NOTE: we automatically append ",(0,a.mdx)("inlineCode",{parentName:"li"},'"."')," (the directory containing the\nconfiguration file) to the ",(0,a.mdx)("inlineCode",{parentName:"li"},"search_roots")," when type checking as a sensible\ndefault and last attempt at an import."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"site_package_path"),": a file path describing a root from which imports should\nbe found and imported from. This takes the lowest priority in import\nresolution, after ",(0,a.mdx)("inlineCode",{parentName:"li"},"project_includes"),", ",(0,a.mdx)("inlineCode",{parentName:"li"},"typeshed"),", and ",(0,a.mdx)("inlineCode",{parentName:"li"},"search_roots"),".",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"Type: list of directories"),(0,a.mdx)("li",{parentName:"ul"},"Default: ",(0,a.mdx)("inlineCode",{parentName:"li"},'["."]')),(0,a.mdx)("li",{parentName:"ul"},"Flag equivalent: ",(0,a.mdx)("inlineCode",{parentName:"li"},"--site-package-path")),(0,a.mdx)("li",{parentName:"ul"},"ENV equivalent: ",(0,a.mdx)("inlineCode",{parentName:"li"},"PYRE_SITE_PACKAGE_PATH")),(0,a.mdx)("li",{parentName:"ul"},"Equivalent Configs: none"))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"python_platform"),": the value used with conditions based on type checking\nagainst\n",(0,a.mdx)("a",{parentName:"li",href:"https://docs.python.org/3/library/sys.html#sys.platform"},(0,a.mdx)("inlineCode",{parentName:"a"},"sys.platform")),"\nvalues.",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"Type: string"),(0,a.mdx)("li",{parentName:"ul"},"Default: ",(0,a.mdx)("inlineCode",{parentName:"li"},'"linux"')),(0,a.mdx)("li",{parentName:"ul"},"Flag equivalent: ",(0,a.mdx)("inlineCode",{parentName:"li"},"--python-platform")),(0,a.mdx)("li",{parentName:"ul"},"ENV equivalent: ",(0,a.mdx)("inlineCode",{parentName:"li"},"PYRE_PYTHON_PLATFORM")),(0,a.mdx)("li",{parentName:"ul"},"Equivalent Configs: ",(0,a.mdx)("inlineCode",{parentName:"li"},"pythonPlatform")," in Pyright, ",(0,a.mdx)("inlineCode",{parentName:"li"},"platform")," in MyPy"))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("inlineCode",{parentName:"li"},"python_version"),": the value used with conditions based on type checking\nagainst\n",(0,a.mdx)("a",{parentName:"li",href:"https://docs.python.org/3/library/sys.html#sys.version"},(0,a.mdx)("inlineCode",{parentName:"a"},"sys.version")),"\nvalues. The format should be ",(0,a.mdx)("inlineCode",{parentName:"li"},"<major>[.<minor>[.<micro>]]"),", where minor and\nmicro can be omitted to take the default positional value.",(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"Type: string"),(0,a.mdx)("li",{parentName:"ul"},"Default: ",(0,a.mdx)("inlineCode",{parentName:"li"},"3.13.0")),(0,a.mdx)("li",{parentName:"ul"},"Flag equivalent: ",(0,a.mdx)("inlineCode",{parentName:"li"},"--python-version")),(0,a.mdx)("li",{parentName:"ul"},"ENV equivalent: ",(0,a.mdx)("inlineCode",{parentName:"li"},"PYRE_PYTHON_VERSION")),(0,a.mdx)("li",{parentName:"ul"},"Equivalent Configs: ",(0,a.mdx)("inlineCode",{parentName:"li"},"pythonVersion")," in Pyright, ",(0,a.mdx)("inlineCode",{parentName:"li"},"python_version")," in MyPy")))))}u.isMDXComponent=!0}}]);