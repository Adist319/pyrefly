"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[2584],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>y,mdx:()=>f,useMDXComponents:()=>c,withMDXComponents:()=>p});var r=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a.apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),p=function(e){return function(t){var n=c(t.components);return r.createElement(e,a({},t,{components:n}))}},c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},y=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(n),y=o,m=p["".concat(l,".").concat(y)]||p[y]||u[y]||a;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var d=2;d<a;d++)l[d]=n[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},78478:(e,t,n)=>{n.d(t,{A:()=>a});var r=n(96540),o=n(92303);function a(e){let{children:t,fallback:n}=e;return(0,o.default)()?r.createElement(r.Fragment,null,null==t?void 0:t()):null!=n?n:null}},62584:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>p,default:()=>f,frontMatter:()=>d,metadata:()=>c,toc:()=>u});var r=n(58168),o=n(96540),a=n(15680),l=n(78478);const i=o.lazy((()=>Promise.all([n.e(1869),n.e(7456),n.e(3757)]).then(n.bind(n,3757))));function s(e){let{editorHeight:t,codeSample:n,showErrorPanel:r}=e;return o.createElement(l.A,null,(()=>o.createElement(o.Suspense,{fallback:o.createElement("div",null,"Loading...")},o.createElement(i,{editorHeight:t,codeSample:n,showErrorPanel:r}))))}const d={title:"Learning Python Types",description:"Get to know Python's Type System with working examples",displayed_sidebar:"docsSidebar",spug:"/"},p="Give Pyrefly a try with some working examples",c={unversionedId:"learn-python-typing",id:"learn-python-typing",title:"Learning Python Types",description:"Get to know Python's Type System with working examples",source:"@site/docs/learn-python-typing.mdx",sourceDirName:".",slug:"/learn-python-typing",permalink:"/en/docs/learn-python-typing",draft:!1,editUrl:"https://github.com/facebook/pyrefly/edit/main/website/docs/learn-python-typing.mdx",tags:[],version:"current",frontMatter:{title:"Learning Python Types",description:"Get to know Python's Type System with working examples",displayed_sidebar:"docsSidebar",spug:"/"},sidebar:"docsSidebar"},y={},u=[{value:"The Basics",id:"the-basics",level:2},{value:"Functions",id:"functions",level:2},{value:"Generics",id:"generics",level:2},{value:"Protocols",id:"protocols",level:2},{value:"Dataclasses",id:"dataclasses",level:2},{value:"TypedDict",id:"typeddict",level:2},{value:"Overloads",id:"overloads",level:2}],m={toc:u};function f(e){let{components:t,...n}=e;return(0,a.mdx)("wrapper",(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"give-pyrefly-a-try-with-some-working-examples"},"Give Pyrefly a try with some working examples"),(0,a.mdx)("p",null,"Python's type system allow you to annotate variables so you, your teammates and your type checker can find bugs before you run your code. Think of it as documentation that's automatically validated and will help your IDE help you."),(0,a.mdx)("p",null,"With the help of type hints, you can catch errors early, improve code completion, and make your code more self-documenting.\nIn this guide, we'll explore the different features of Python's type system, including generics, protocols, dataclasses, typed dictionaries, and overloads. Each section includes a brief description of the feature, along with a working example that you can try out using Pyrefly."),(0,a.mdx)("h2",{id:"the-basics"},"The Basics"),(0,a.mdx)("p",null,"Python's built-in types can be used to write many simple type hints."),(0,a.mdx)("pre",null,(0,a.mdx)(s,{editorHeight:450,codeSample:'# Example: Basic Types\n\nfrom typing import reveal_type\n\nage: int = 5\nreveal_type(age) # revealed type: int\n\nage = "oops"\n\nname: str = "John"\nreveal_type(name) # revealed type: str\n\nnumbers: list[int] = [1, 2, 3]\nreveal_type(numbers) # revealed type: list[int]\n\nnames: list[str] = ["John", "Jane"]\nreveal_type(names) # revealed type: list[str]\n\nperson: dict[str, str] = {"name": "John", "age": "30"}\nreveal_type(person) # revealed type: dict[str, str]\n\nis_admin: bool = True\nreveal_type(is_admin) # revealed type: bool\n',showErrorPanel:!1,mdxType:"TryPyre2BrowserOnly"})),(0,a.mdx)("h2",{id:"functions"},"Functions"),(0,a.mdx)("p",null,"Defining the parameter and return types for a function doesn't just help prevent bugs, but it makes it easier to navigate in other files. You don't always need to define a return type - we'll do our best to infer it for you! We can't always get it right and an explicit return type will help your IDE navigate faster and more accurately."),(0,a.mdx)("pre",null,(0,a.mdx)(s,{editorHeight:280,codeSample:'# Example: Functions\n\nfrom typing import reveal_type\n\ndef greet(name: str) -> str:\n    return f"Hello , {name}!"\n\ngreet("Pyrefly")\n\ndef whatDoesThisFunctionReturnAgain(a: int, b: int):\n    return a + b\n\nreveal_type(whatDoesThisFunctionReturnAgain(2, 3)) # revealed type: int\n',showErrorPanel:!1,mdxType:"TryPyre2BrowserOnly"})),(0,a.mdx)("h2",{id:"generics"},"Generics"),(0,a.mdx)("p",null,"Generics allow you to define reusable functions and classes that work with multiple types. This feature enables you to write more flexible and adaptable code."),(0,a.mdx)("pre",null,(0,a.mdx)(s,{editorHeight:250,codeSample:"# Example: Generic Classes\n\nfrom typing import reveal_type\n\nclass C[T]:\n    def __init__(self, x: T):\n        self.x = x\n    def box(self) -> list[T]:\n        return [self.x]\n\nc = C(0)\nreveal_type(c.box())  # revealed type: list[int]\n",showErrorPanel:!1,mdxType:"TryPyre2BrowserOnly"})),(0,a.mdx)("h2",{id:"protocols"},"Protocols"),(0,a.mdx)("p",null,"Protocols enable structural typing, which allows you to define interfaces without explicit inheritance. This feature helps you write more modular and composable code."),(0,a.mdx)("pre",null,(0,a.mdx)(s,{editorHeight:400,codeSample:'# Example: Structural Typing with Protocols\n\nfrom typing import Iterable, Protocol\n\nclass Writer(Protocol):\n    def write(self) -> None: ...\n\nclass GoodWorld:\n    def write(self) -> None:\n        print("Hello world!")\n\nclass BadWorld:\n    pass\n\ndef f(writer: Writer):\n    pass\n\nf(GoodWorld()) # OK\nf(BadWorld())  # ERROR!\n',showErrorPanel:!1,mdxType:"TryPyre2BrowserOnly"})),(0,a.mdx)("h2",{id:"dataclasses"},"Dataclasses"),(0,a.mdx)("p",null,"Dataclasses allow you to create type-safe data structures while minimizing boilerplate."),(0,a.mdx)("pre",null,(0,a.mdx)(s,{editorHeight:250,codeSample:'# Example: Dataclasses\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n    x: float\n    y: float\n\nPoint(x=0.0, y=0.0)    # OK\nPoint(x=0.0, y="oops") # ERROR!\n',showErrorPanel:!1,mdxType:"TryPyre2BrowserOnly"})),(0,a.mdx)("h2",{id:"typeddict"},"TypedDict"),(0,a.mdx)("p",null,"Typed dictionaries enable you to define dictionaries with specific key-value types. This feature lets you bring type safety to ad-hoc dictionary structures without major refactoring."),(0,a.mdx)("pre",null,(0,a.mdx)(s,{editorHeight:200,codeSample:'# Example: TypedDict\n\nfrom typing import TypedDict\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n\ngood_movie: Movie = {"name": "Toy Story", "year": 1995} # OK\nbad_movie: Movie = {"name": "The Room", "year": "2003"}  # ERROR!\n',showErrorPanel:!1,mdxType:"TryPyre2BrowserOnly"})),(0,a.mdx)("h2",{id:"overloads"},"Overloads"),(0,a.mdx)("p",null,"Overloads allow you to define multiple function signatures for a single function. Like generics, this feature helps you write more flexible and adaptable code."),(0,a.mdx)("pre",null,(0,a.mdx)(s,{editorHeight:300,codeSample:'# Example: Overloads\n\nfrom typing import overload, reveal_type\n\n@overload\ndef f(x: int) -> int: ...\n\n@overload\ndef f(x: str) -> str: ...\n\ndef f(x: int | str) -> int | str:\n    return x\n\nreveal_type(f(0))  # revealed type: int\nreveal_type(f("")) # revealed type: str\n',showErrorPanel:!1,mdxType:"TryPyre2BrowserOnly"})))}f.isMDXComponent=!0}}]);