"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[6353],{26353:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"typing-for-python-developers","title":"Typing for Python Developers","description":"Get to know Python\'s Type System with working examples","source":"@site/docs/typing-for-python-developers.mdx","sourceDirName":".","slug":"/typing-for-python-developers","permalink":"/en/docs/typing-for-python-developers","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/typing-for-python-developers.mdx","tags":[],"version":"current","frontMatter":{"title":"Typing for Python Developers","description":"Get to know Python\'s Type System with working examples"},"sidebar":"docsSidebar","previous":{"title":"Introduction","permalink":"/en/docs/"},"next":{"title":"Python Typing for New Developers","permalink":"/en/docs/python-typing-for-beginners"}}');var r=s(74848),i=s(28453),l=s(31888);const o={title:"Typing for Python Developers",description:"Get to know Python's Type System with working examples"},a="Typing for Python Developers",d={},c=[{value:"Types with Inference",id:"types-with-inference",level:3},{value:"Where Inference Shines \u2728",id:"where-inference-shines-",level:3},{value:"When to Add Hints",id:"when-to-add-hints",level:3},{value:"Define Types Inline",id:"define-types-inline",level:2},{value:"The Basics",id:"the-basics",level:3},{value:"Functions",id:"functions",level:3},{value:"Advanced Types",id:"advanced-types",level:2},{value:"Composing Types",id:"composing-types",level:3},{value:"Unions &amp; Optional",id:"unions--optional",level:3},{value:"Generics",id:"generics",level:3},{value:"Protocols",id:"protocols",level:3},{value:"Structural Types",id:"structural-types",level:2},{value:"Dataclasses",id:"dataclasses",level:3},{value:"TypedDict",id:"typeddict",level:3},{value:"Overloads",id:"overloads",level:3},{value:"Typing Features, PEPS available in each Python Version",id:"typing-features-peps-available-in-each-python-version",level:2},{value:"Key Highlights Summary:",id:"key-highlights-summary",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"typing-for-python-developers",children:"Typing for Python Developers"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"5\u2011Minute Tour with Pyrefly"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Goal:"})," In five minutes you'll know how Python's static type system ",(0,r.jsx)(n.em,{children:"infers"}),", ",(0,r.jsx)(n.em,{children:"defines"}),", and ",(0,r.jsx)(n.em,{children:"composes"})," types\u2014and you'll have copy\u2011paste snippets to start using right away."]}),"\n",(0,r.jsxs)(n.p,{children:["If you are new to Python, check out our ",(0,r.jsx)(n.a,{href:"../python-typing-for-beginners/",children:"Python Typing for New Developers guide"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Python's type system allows you to annotate variables so you, your teammates and your type checker can find bugs before you run your code. Think of it as documentation that's automatically validated and will help your IDE help you."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"TL;DR"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Catch bugs ",(0,r.jsx)(n.strong,{children:"before"})," running the code."]}),"\n",(0,r.jsx)(n.li,{children:"Improve editor autocomplete & refactors."}),"\n",(0,r.jsx)(n.li,{children:"Turn your code into living documentation."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"types-with-inference",children:"Types with Inference"}),"\n",(0,r.jsxs)(n.p,{children:["Static analyzers can often ",(0,r.jsx)(n.em,{children:"infer"})," types from your code\u2014no annotations required. Pyrefly takes this a step further."]}),"\n",(0,r.jsx)(l.A,{sampleFilename:"basic_inference.py",codeSample:'# Basic Inference\nanswer = 42\nreveal_type(answer) # hover to reveal type\n\nfruits = ["apple", "banana", "cherry"]\nscores = {"math": 95, "science": 90}\n\ndef greet(name):\n  return f"Hello, {name}!"\n\nmessage = greet("World")\n'}),"\n",(0,r.jsx)(n.h3,{id:"where-inference-shines-",children:"Where Inference Shines \u2728"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Constant assignments (",(0,r.jsx)(n.code,{children:"answer = 42 -> int"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["List/tuple/dict literals with uniform elements (",(0,r.jsx)(n.code,{children:'names = ["A", "B"] -> list[str]'}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Return types if parameter types are annotated:"}),"\n"]}),"\n",(0,r.jsx)(l.A,{sampleFilename:"return_inference.py",codeSample:"def add(a: int, b: int):   # \u2705 param annotations\n  return a + b    # \ud83d\udd0d return inferred -> int\n"}),"\n",(0,r.jsx)(n.h3,{id:"when-to-add-hints",children:"When to Add Hints"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Public APIs (library or service boundaries)"}),"\n",(0,r.jsxs)(n.li,{children:["Mixed collections (",(0,r.jsx)(n.code,{children:"list[int | str]"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Callable signatures (decorators, callbacks)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"define-types-inline",children:"Define Types Inline"}),"\n",(0,r.jsx)(n.h3,{id:"the-basics",children:"The Basics"}),"\n",(0,r.jsx)(n.p,{children:"Python's built-in types can be used to write many simple type hints."}),"\n",(0,r.jsx)(l.A,{sampleFilename:"built_in_types.py",codeSample:'# Example: Basic Types\n\nfrom typing import reveal_type\n\nage: int = 5\nreveal_type(age) # revealed type: Literal[5]\n\nage = "oops"\n\nname: str = "John"\nreveal_type(name) # revealed type: Literal[\'John\']\n\nnumbers: list[int] = [1, 2, 3]\nreveal_type(numbers) # revealed type: list[int]\n\nnames: list[str] = ["John", "Jane"]\nreveal_type(names) # revealed type: list[str]\n\nperson: dict[str, str] = {"name": "John", "age": "30"}\nreveal_type(person) # revealed type: dict[str, str]\n\nis_admin: bool = True\nreveal_type(is_admin) # revealed type: Literal[True]\n'}),"\n",(0,r.jsx)(n.h3,{id:"functions",children:"Functions"}),"\n",(0,r.jsx)(n.p,{children:"Defining the parameter and return types for a function doesn't just help prevent bugs, but it makes it easier to navigate in other files. You don't always need to define a return type - we'll do our best to infer it for you! We can't always get it right and an explicit return type will help your IDE navigate faster and more accurately."}),"\n",(0,r.jsx)(l.A,{sampleFilename:"functions_types.py",codeSample:'# Example: Functions\n\nfrom typing import reveal_type\n\ndef greet(name: str) -> str:\n  return f"Hello, {name}!"\n\ngreet("Pyrefly")\n\ndef whatDoesThisFunctionReturnAgain(a: int, b: int):\n  return a + b\n\nreveal_type(whatDoesThisFunctionReturnAgain(2, 3)) # revealed type: int\n'}),"\n",(0,r.jsx)(n.h2,{id:"advanced-types",children:"Advanced Types"}),"\n",(0,r.jsx)(n.h3,{id:"composing-types",children:"Composing Types"}),"\n",(0,r.jsx)(n.p,{children:"The real power comes from composing smaller pieces into richer shapes."}),"\n",(0,r.jsx)(n.h3,{id:"unions--optional",children:"Unions & Optional"}),"\n",(0,r.jsx)(l.A,{sampleFilename:"unions_types.py",codeSample:"# Union and Optional Types\n\nfrom typing import Optional\n\ndef to_int(data: str | bytes | None) -> Optional[int]:\n  if data is None:\n      return None\n  if isinstance(data, bytes):\n      data = data.decode()\n  return int(data)\n"}),"\n",(0,r.jsx)(n.h3,{id:"generics",children:"Generics"}),"\n",(0,r.jsx)(n.p,{children:"Generics allow you to define reusable functions and classes that work with multiple types. This feature enables you to write more flexible and adaptable code."}),"\n",(0,r.jsx)(l.A,{sampleFilename:"generics.py",codeSample:"# Example: Generic Classes\n\nfrom typing import reveal_type\n\nclass C[T]:\n  def __init__(self, x: T):\n      self.x = x\n  def box(self) -> list[T]:\n      return [self.x]\n\nc = C(0)\nreveal_type(c.box())  # revealed type: list[int]\n"}),"\n",(0,r.jsx)(n.h3,{id:"protocols",children:"Protocols"}),"\n",(0,r.jsx)(n.p,{children:"Protocols enable structural typing, which allows you to define interfaces without explicit inheritance. This feature helps you write more modular and composable code."}),"\n",(0,r.jsx)(l.A,{sampleFilename:"protocols.py",codeSample:'# Example: Structural Typing with Protocols\n\nfrom typing import Iterable, Protocol\n\nclass Writer(Protocol):\n  def write(self) -> None: ...\n\nclass GoodWorld:\n  def write(self) -> None:\n      print("Hello world!")\n\nclass BadWorld:\n  pass\n\ndef f(writer: Writer):\n  pass\n\nf(GoodWorld()) # OK\nf(BadWorld())  # ERROR!\n'}),"\n",(0,r.jsx)(n.h2,{id:"structural-types",children:"Structural Types"}),"\n",(0,r.jsx)(n.p,{children:'Python also employs a structural type system, often referred to as "duck typing." This concept is based on the idea that if two objects have the same shape or attributes, they can be treated as being of the same type.'}),"\n",(0,r.jsx)(n.h3,{id:"dataclasses",children:"Dataclasses"}),"\n",(0,r.jsx)(n.p,{children:"Dataclasses allow you to create type-safe data structures while minimizing boilerplate."}),"\n",(0,r.jsx)(l.A,{sampleFilename:"data_classes.py",codeSample:'# Example: Dataclasses\n\nfrom dataclasses import dataclass\n\n@dataclass\nclass Point:\n  x: float\n  y: float\n\nPoint(x=0.0, y=0.0)    # OK\nPoint(x=0.0, y="oops") # ERROR!\n'}),"\n",(0,r.jsx)(n.h3,{id:"typeddict",children:"TypedDict"}),"\n",(0,r.jsx)(n.p,{children:"Typed dictionaries enable you to define dictionaries with specific key-value types. This feature lets you bring type safety to ad-hoc dictionary structures without major refactoring."}),"\n",(0,r.jsx)(l.A,{sampleFilename:"typed_dict.py",codeSample:'# Example: TypedDict\n\nfrom typing import TypedDict\n\nclass Movie(TypedDict):\n  name: str\n  year: int\n\ngood_movie: Movie = {"name": "Toy Story", "year": 1995} # OK\nbad_movie: Movie = {"name": "The Room", "year": "2003"}  # ERROR!\n'}),"\n",(0,r.jsx)(n.h3,{id:"overloads",children:"Overloads"}),"\n",(0,r.jsx)(n.p,{children:"Overloads allow you to define multiple function signatures for a single function. Like generics, this feature helps you write more flexible and adaptable code."}),"\n",(0,r.jsx)(l.A,{sampleFilename:"overloads.py",codeSample:'# Example: Overloads\n\nfrom typing import overload, reveal_type\n\n@overload\ndef f(x: int) -> int: ...\n\n@overload\ndef f(x: str) -> str: ...\n\ndef f(x: int | str) -> int | str:\n  return x\n\nreveal_type(f(0))  # revealed type: int\nreveal_type(f("")) # revealed type: str\n'}),"\n",(0,r.jsx)(n.h2,{id:"typing-features-peps-available-in-each-python-version",children:"Typing Features, PEPS available in each Python Version"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature (click PEP for details)"}),(0,r.jsx)(n.th,{children:"What it adds / looks like"}),(0,r.jsx)(n.th,{children:"Introduced in"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0484/",children:"PEP 484"})," -- Core ",(0,r.jsx)(n.strong,{children:"type hints"})," & ",(0,r.jsx)(n.code,{children:"typing"})," module"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"def add(a: int, b: int) -> int:"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.5"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0526/",children:"PEP 526"})," -- ",(0,r.jsx)(n.strong,{children:"Variable annotations"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"count: int = 0"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.6"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0563/",children:"PEP 563"})," -- ",(0,r.jsx)(n.code,{children:"from __future__ import annotations"})," (lazy eval)"]}),(0,r.jsxs)(n.td,{children:["Annotations stored as ",(0,r.jsx)(n.strong,{children:"strings"})]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"3.7"})," (future\u2011flag)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0544/",children:"PEP 544"})," -- ",(0,r.jsx)(n.strong,{children:"Protocols"})," (structural typing)"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"class Jsonable(Protocol): ..."})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.8"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0589/",children:"PEP 589"})," -- ",(0,r.jsx)(n.strong,{children:"TypedDict"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"class User(TypedDict): ..."})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.8"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0586/",children:"PEP 586"})," -- ",(0,r.jsx)(n.strong,{children:"Literal"})," types"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'def log(level: Literal["info","warn"]): ...'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.8"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0591/",children:"PEP 591"})," -- ",(0,r.jsx)(n.strong,{children:"Final"})," qualifier"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'TOKEN: Final[str] = "..."'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.8"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0585/",children:"PEP 585"})," -- ",(0,r.jsx)(n.strong,{children:"Built\u2011in generics"})]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"list[int]"}),", ",(0,r.jsx)(n.code,{children:"dict[str, Any]"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.9"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0593/",children:"PEP 593"})," -- ",(0,r.jsx)(n.strong,{children:"Annotated"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'x: Annotated[int, "units=px"]'})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.9"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0604/",children:"PEP 604"})," -- ",(0,r.jsx)(n.strong,{children:"Union"})," syntax"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"int | None"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.10"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0612/",children:"PEP 612"})," -- ",(0,r.jsx)(n.strong,{children:"ParamSpec / Concatenate"})]}),(0,r.jsx)(n.td,{children:"decorator\u2011safe generics"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.10"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0613/",children:"PEP 613"})," -- ",(0,r.jsx)(n.code,{children:"TypeAlias"})," qualifier"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"Vector: TypeAlias = list[float]"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.10"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0647/",children:"PEP 647"})," -- ",(0,r.jsx)(n.strong,{children:"TypeGuard"})," for narrowing"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"def is_str(x) -> TypeGuard[str]: ..."})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.10"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0655/",children:"PEP 655"})," -- ",(0,r.jsx)(n.code,{children:"Required"})," / ",(0,r.jsx)(n.code,{children:"NotRequired"})," for ",(0,r.jsx)(n.strong,{children:"TypedDict"})]}),(0,r.jsx)(n.td,{children:"optional vs. mandatory keys"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.11"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0646/",children:"PEP 646"})," -- ",(0,r.jsx)(n.strong,{children:"Variadic generics"})," (",(0,r.jsx)(n.code,{children:"TypeVarTuple"}),", ",(0,r.jsx)(n.code,{children:"Unpack"}),")"]}),(0,r.jsx)(n.td,{children:"tensor shapes, 2\u2011D arrays, ..."}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.11"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0673/",children:"PEP 673"})," -- ",(0,r.jsx)(n.strong,{children:"Self"})," type"]}),(0,r.jsxs)(n.td,{children:["fluent APIs: ",(0,r.jsx)(n.code,{children:"def set(...) -> Self:"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.11"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0681/",children:"PEP 681"})," -- ",(0,r.jsx)(n.strong,{children:"dataclass_transform"})," helper"]}),(0,r.jsx)(n.td,{children:"libraries like Pydantic, attrs"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.11"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0695/",children:"PEP 695"})," -- ",(0,r.jsx)(n.strong,{children:"Class\u2011level generics syntax"})]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"class Box[T]: ..."})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.12"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0698/",children:"PEP 698"})," -- ",(0,r.jsx)(n.code,{children:"@override"})," decorator"]}),(0,r.jsx)(n.td,{children:"flag intentional overrides"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.13"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://peps.python.org/pep-0649/",children:"PEP 649"})," -- ",(0,r.jsx)(n.em,{children:"New"})," deferred\u2011eval algorithm (replaces PEP 563)"]}),(0,r.jsx)(n.td,{children:"becomes the default"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"3.14"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"key-highlights-summary",children:"Key Highlights Summary:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Inference:"})," Python's static analyzers can infer types from your code, reducing the need for explicit annotations. This feature enhances code readability and helps catch bugs early."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Defining Types:"})," You can define types inline using Python's built-in types, which aids in documentation and improves IDE support."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Advanced Types:"})," The guide covers advanced concepts like composing types, using unions and optionals, generics, protocols, and structural types like dataclasses and TypedDict."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Practical Examples:"})," The guide includes examples of functions, generic classes, structural typing with protocols, and more, demonstrating how to apply these concepts in real-world scenarios."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},31888:(e,n,s)=>{s.d(n,{A:()=>o});var t=s(35363),r=s(96540),i=(s(32855),s(74848));const l=r.lazy((()=>Promise.all([s.e(1869),s.e(8285),s.e(4129)]).then(s.bind(s,14129))));function o(e){let{sampleFilename:n,codeSample:s=""}=e;if(null==n)throw"Missing sampleFilename. IDE services won't work properly.";return(0,i.jsx)("pre",{className:"xqid1ag",children:(0,i.jsx)(t.A,{children:()=>(0,i.jsx)(r.Suspense,{fallback:(0,i.jsx)("div",{children:"Loading..."}),children:(0,i.jsx)(l,{sampleFilename:n,isCodeSnippet:!0,codeSample:s})})})})}},32855:(e,n,s)=>{s.d(n,{xk:()=>a});var t,r={};var i=function(){if(t)return r;t=1,Object.defineProperty(r,"__esModule",{value:!0}),r.styleq=void 0;var e=new WeakMap;function n(n){var s,t,r;return null!=n&&(s=!0===n.disableCache,t=!0===n.disableMix,r=n.transform),function(){for(var n=[],i="",l=null,o="",a=s?null:e,d=new Array(arguments.length),c=0;c<arguments.length;c++)d[c]=arguments[c];for(;d.length>0;){var h=d.pop();if(null!=h&&!1!==h)if(Array.isArray(h))for(var p=0;p<h.length;p++)d.push(h[p]);else{var y=null!=r?r(h):h;if(null!=y.$$css){var x="";if(null!=a&&a.has(y)){var u=a.get(y);null!=u&&(x=u[0],o=u[2],n.push.apply(n,u[1]),a=u[3])}else{var j=[];for(var f in y){var g=y[f];if("$$css"!==f)"string"==typeof g||null===g?n.includes(f)||(n.push(f),null!=a&&j.push(f),"string"==typeof g&&(x+=x?" "+g:g)):console.error("styleq: ".concat(f," typeof ").concat(String(g),' is not "string" or "null".'));else{var m=y[f];!0!==m&&(o=o?m+"; "+o:m)}}if(null!=a){var v=new WeakMap;a.set(y,[x,j,o,v]),a=v}}x&&(i=i?x+" "+i:x)}else if(t)null==l&&(l={}),l=Object.assign({},y,l);else{var w=null;for(var b in y){var P=y[b];void 0!==P&&(n.includes(b)||(null!=P&&(null==l&&(l={}),null==w&&(w={}),w[b]=P),n.push(b),a=null))}null!=w&&(l=Object.assign(w,l))}}}return[i,l,o]}}return(r.styleq=n()).factory=n,r}();const l=e=>new Error(`Unexpected 'stylex.${e}' call at runtime. Styles must be compiled by '@stylexjs/babel-plugin'.`),o=e=>l(`types.${e}`);function a(){for(var e=arguments.length,n=new Array(e),s=0;s<e;s++)n[s]=arguments[s];const[t,r,l]=i.styleq(n),o={};return null!=t&&""!==t&&(o.className=t),null!=r&&Object.keys(r).length>0&&(o.style=r),null!=l&&""!==l&&(o["data-style-src"]=l),o}const d={angle:e=>{throw o("angle")},color:e=>{throw o("color")},url:e=>{throw o("url")},image:e=>{throw o("image")},integer:e=>{throw o("integer")},lengthPercentage:e=>{throw o("lengthPercentage")},length:e=>{throw o("length")},percentage:e=>{throw o("percentage")},number:e=>{throw o("number")},resolution:e=>{throw o("resolution")},time:e=>{throw o("time")},transformFunction:e=>{throw o("transformFunction")},transformList:e=>{throw o("transformList")}};function c(){for(var e=arguments.length,n=new Array(e),s=0;s<e;s++)n[s]=arguments[s];const[t]=i.styleq(n);return t}c.attrs=function(){const{className:e,"data-style-src":n,style:s}=a(...arguments),t={};return null!=e&&""!==e&&(t.class=e),null!=s&&Object.keys(s).length>0&&(t.style=Object.keys(s).map((e=>`${e}:${s[e]};`)).join("")),null!=n&&""!==n&&(t["data-style-src"]=n),t},c.create=function(e){throw l("create")},c.createTheme=(e,n)=>{throw l("createTheme")},c.defineVars=function(e){throw l("defineVars")},c.firstThatWorks=function(){throw l("firstThatWorks")},c.keyframes=e=>{throw l("keyframes")},c.props=a,c.types=d},35363:(e,n,s)=>{s.d(n,{A:()=>i});s(96540);var t=s(9136),r=s(74848);function i(e){let{children:n,fallback:s}=e;return(0,t.default)()?(0,r.jsx)(r.Fragment,{children:n?.()}):s??null}}}]);