"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[1693],{1693:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>a,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"IDE","title":"IDE","description":"Pyrefly in the IDE","source":"@site/docs/IDE.mdx","sourceDirName":".","slug":"/IDE","permalink":"/en/docs/IDE","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/IDE.mdx","tags":[],"version":"current","frontMatter":{"title":"IDE","description":"Pyrefly in the IDE"},"sidebar":"docsSidebar","previous":{"title":"FAQ","permalink":"/en/docs/pyrefly-faq"},"next":{"title":"Error Suppressions","permalink":"/en/docs/error-suppressions"}}');var r=i(74848),l=i(28453);const t={title:"IDE",description:"Pyrefly in the IDE"},o="Pyrefly in the IDE",d={},c=[{value:"Quick start",id:"quick-start",level:2},{value:"Features",id:"features",level:2},{value:"Customization",id:"customization",level:2},{value:"Issues?",id:"issues",level:2},{value:"Other Editors",id:"other-editors",level:2},{value:"Jetbrains",id:"jetbrains",level:3},{value:"Neovim + <code>lspconfig</code>",id:"neovim--lspconfig",level:3},{value:"Neovim 0.11+",id:"neovim-011",level:3},{value:"Vim + Ale",id:"vim--ale",level:3}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"pyrefly-in-the-ide",children:"Pyrefly in the IDE"})}),"\n",(0,r.jsxs)(n.p,{children:["Pyrefly seamlessly integrates into IDEs with our ",(0,r.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=meta.pyrefly",children:"VSCode"})," and ",(0,r.jsx)(n.a,{href:"https://open-vsx.org/extension/meta/pyrefly",children:"OpenVSX"})," extensions. For other editors like vim/emacs, see ",(0,r.jsx)(n.a,{href:"#other-editors",children:"other editors"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"quick-start",children:"Quick start"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Install the Pyrefly extension from the ",(0,r.jsx)(n.a,{href:"https://marketplace.visualstudio.com/items?itemName=meta.pyrefly",children:"VSCode marketplace"})," or ",(0,r.jsx)(n.a,{href:"https://open-vsx.org/extension/meta/pyrefly",children:"OpenVSX"})]}),"\n",(0,r.jsx)(n.li,{children:"Open a python file and the extension will activate"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsx)(n.p,{children:"The Pyrefly extension provides:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Inline type errors matching the Pyrefly command-line"}),"\n",(0,r.jsx)(n.li,{children:"Types shown inline and on hover"}),"\n",(0,r.jsx)(n.li,{children:"Go-to definition"}),"\n",(0,r.jsx)(n.li,{children:"Autocomplete / intellisense"}),"\n",(0,r.jsx)(n.li,{children:"Basic document symbols / breadcrumbs"}),"\n",(0,r.jsx)(n.li,{children:"Find references"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"customization",children:"Customization"}),"\n",(0,r.jsxs)(n.p,{children:["By default, Pyrefly should work in the IDE with no configuration necessary. But to ensure your project is set up properly, see ",(0,r.jsx)(n.a,{href:"../configuration",children:"configurations"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"The following configuration options are IDE-specific and exposed as VSCode settings:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"python.pyrefly.disableLanguageServices"})," [boolean: false]: by default, Pyrefly will provide both type errors and other language features like go-to definition, intellisense, hover, etc. Enable this option to keep type errors from Pyrefly unchanged but use VSCode's Python extension for everything else."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"python.pyrefly.disableTypeErrors"})," [boolean: false]: by default, Pyrefly will provide type errors in your project. Enable this setting to disable type error squiggles appearing in the editor."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["If the project configuration does not specify the Python interpreter, Pyrefly will use the ",(0,r.jsx)(n.a,{href:"https://code.visualstudio.com/docs/python/environments",children:"interpreter selected in VSCode"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"issues",children:"Issues?"}),"\n",(0,r.jsxs)(n.p,{children:["If you experience issues with the Pyrefly extension, please create an ",(0,r.jsx)(n.a,{href:"https://github.com/facebook/pyrefly/issues",children:"issue"})," on github."]}),"\n",(0,r.jsx)(n.h2,{id:"other-editors",children:"Other Editors"}),"\n",(0,r.jsx)(n.p,{children:"Support for other editors is community-driven. If you would like to set this up, please contribute."}),"\n",(0,r.jsx)(n.h3,{id:"jetbrains",children:"Jetbrains"}),"\n",(0,r.jsxs)(n.p,{children:["An unofficial Jetbrains extension has been developed ",(0,r.jsx)(n.a,{href:"https://plugins.jetbrains.com/plugin/26829-pyrefly",children:"here"})]}),"\n",(0,r.jsxs)(n.h3,{id:"neovim--lspconfig",children:["Neovim + ",(0,r.jsx)(n.code,{children:"lspconfig"})]}),"\n",(0,r.jsxs)(n.p,{children:["With the ",(0,r.jsx)(n.code,{children:"lspconfig"})," ",(0,r.jsx)(n.a,{href:"https://github.com/neovim/nvim-lspconfig",children:"plugin"})," and ",(0,r.jsx)(n.code,{children:"uv"})," installed, you can use this configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'local lspconfig = require("lspconfig")\nlocal configs = require("lspconfig.configs")\n\nif not configs.pyrefly then\n  configs.pyrefly = {\n      cmd = { "uv", "run", "pyrefly", "lsp" },\n      filetypes = { "python" },\n      root_dir = function(fname)\n        return lspconfig.util.find_git_ancestor(fname) or vim.loop.os_homedir()\n      end,\n      settings = {},\n    },\nend\n\nlspconfig.pyrefly.setup({})\n'})}),"\n",(0,r.jsx)(n.h3,{id:"neovim-011",children:"Neovim 0.11+"}),"\n",(0,r.jsxs)(n.p,{children:["Place the following file under ",(0,r.jsx)(n.code,{children:"~/.config/nvim/lsp"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'return {\n  cmd = { "pyrefly", "lsp" },\n  filetypes = { "python" },\n  settings = {},\n  on_exit = function(code, _, _)\n    vim.notify("Closing Pyrefly LSP exited with code: " .. code, vim.log.levels.INFO)\n  end,\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Then enable it in ",(0,r.jsx)(n.code,{children:"init.lua"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-lua",children:'vim.lsp.enable({"pyrefly"})\n'})}),"\n",(0,r.jsx)(n.h3,{id:"vim--ale",children:"Vim + Ale"}),"\n",(0,r.jsxs)(n.p,{children:["Once ",(0,r.jsx)(n.a,{href:"https://github.com/dense-analysis/ale/pull/4972",children:"this"})," gets merged, you will only need:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"let g:ale_linters = {\n    ...\n  \\ 'python': ['pyrefly'],\n    ...\n  \\ }\n"})})]})}function a(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);