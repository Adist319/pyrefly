"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[5940],{75940:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"error-kinds","title":"Error Kinds","description":"Pyrefly error categories and suppression codes","source":"@site/docs/error-kinds.mdx","sourceDirName":".","slug":"/error-kinds","permalink":"/en/docs/error-kinds","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/error-kinds.mdx","tags":[],"version":"current","frontMatter":{"title":"Error Kinds","description":"Pyrefly error categories and suppression codes"},"sidebar":"docsSidebar","previous":{"title":"FAQ","permalink":"/en/docs/pyrefly-faq"},"next":{"title":"Import Resolution","permalink":"/en/docs/import-resolution"}}');var a=i(74848),t=i(28453);const s={title:"Error Kinds",description:"Pyrefly error categories and suppression codes"},d="Error Kinds",l={},o=[{value:"annotation-mismatch",id:"annotation-mismatch",level:2},{value:"assert-type",id:"assert-type",level:2},{value:"async-error",id:"async-error",level:2},{value:"bad-argument-count",id:"bad-argument-count",level:2},{value:"bad-argument-type",id:"bad-argument-type",level:2},{value:"bad-assignment",id:"bad-assignment",level:2},{value:"bad-class-definition",id:"bad-class-definition",level:2},{value:"bad-function-definition",id:"bad-function-definition",level:2},{value:"bad-keyword-argument",id:"bad-keyword-argument",level:2},{value:"bad-override",id:"bad-override",level:2},{value:"bad-return",id:"bad-return",level:2},{value:"bad-specialization",id:"bad-specialization",level:2},{value:"bad-unpacking",id:"bad-unpacking",level:2},{value:"match-error",id:"match-error",level:2},{value:"missing-attribute",id:"missing-attribute",level:2},{value:"import-error",id:"import-error",level:2},{value:"index-error",id:"index-error",level:2},{value:"internal-error",id:"internal-error",level:2},{value:"invalid-annotation",id:"invalid-annotation",level:2},{value:"invalid-argument",id:"invalid-argument",level:2},{value:"invalid-inheritance",id:"invalid-inheritance",level:2},{value:"invalid-literal",id:"invalid-literal",level:2},{value:"invalid-overload",id:"invalid-overload",level:2},{value:"invalid-param-spec",id:"invalid-param-spec",level:2},{value:"invalid-super-call",id:"invalid-super-call",level:2},{value:"invalid-type-var",id:"invalid-type-var",level:2},{value:"invalid-type-var-tuple",id:"invalid-type-var-tuple",level:2},{value:"invalid-yield",id:"invalid-yield",level:2},{value:"missing-argument",id:"missing-argument",level:2},{value:"missing-module-attribute",id:"missing-module-attribute",level:2},{value:"no-access",id:"no-access",level:2},{value:"no-matching-overload",id:"no-matching-overload",level:2},{value:"not-a-type",id:"not-a-type",level:2},{value:"not-callable",id:"not-callable",level:2},{value:"not-iterable",id:"not-iterable",level:2},{value:"parse-error",id:"parse-error",level:2},{value:"read-only",id:"read-only",level:2},{value:"reveal-type",id:"reveal-type",level:2},{value:"type-alias-error",id:"type-alias-error",level:2},{value:"typed-dict-key-error",id:"typed-dict-key-error",level:2},{value:"unexpected-keyword",id:"unexpected-keyword",level:2},{value:"unknown-name",id:"unknown-name",level:2},{value:"unsupported-operand",id:"unsupported-operand",level:2},{value:"unsupported",id:"unsupported",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"error-kinds",children:"Error Kinds"})}),"\n",(0,a.jsxs)(n.p,{children:["An ",(0,a.jsx)(n.em,{children:"error kind"})," categorizes an error by the part of the typing specification\nthat an error is related to. Every error has exactly one kind."]}),"\n",(0,a.jsx)(n.p,{children:'The main use of error kinds is as short names ("slugs") that can be used in\nerror suppression comments.'}),"\n",(0,a.jsx)(n.p,{children:"placeholder for error kinds"}),"\n",(0,a.jsx)(n.h2,{id:"annotation-mismatch",children:"annotation-mismatch"}),"\n",(0,a.jsx)(n.p,{children:"This error indicates a mismatch between multiple annotations for a single\nvariable. This is relatively uncommon, but it can happen in if-statements:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'if some_cond:\n    x: int = 1\nelse:\n    x: str = "two" # Inconsistent type annotations for x: str, int [annotation-mismatch]\n'})}),"\n",(0,a.jsx)(n.p,{children:"It can be helpful to annotate the variable before branch, especially if there is\na useful default value for it. For example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'x: str = "default"\nif some_cond:\n  x = "actual value"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"assert-type",children:"assert-type"}),"\n",(0,a.jsxs)(n.p,{children:["An ",(0,a.jsx)(n.code,{children:"assert-type"})," error is raised when a ",(0,a.jsx)(n.code,{children:"typing.assert_type()"})," call fails."]}),"\n",(0,a.jsxs)(n.p,{children:["This error kind should never be suppressed, since that rather defeats the point\nof of ",(0,a.jsx)(n.code,{children:"typing.assert_type()"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"async-error",children:"async-error"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"async-error"})," is reported when attempting to ",(0,a.jsx)(n.code,{children:"await"})," on something that is not\nawaitable. This may indicate that a function should have been marked ",(0,a.jsx)(n.code,{children:"async"})," but\nwasn't."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def some_func() -> None:\n  ...\n\nawait some_func() # Expression is not awaitable [async-error]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This will also arise if the context manager used in an ",(0,a.jsx)(n.code,{children:"async with"})," statement\nhas ",(0,a.jsx)(n.code,{children:"__aenter__"})," and ",(0,a.jsx)(n.code,{children:"__aexit__"})," methods that are not marked ",(0,a.jsx)(n.code,{children:"async"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["The fix is to use an ",(0,a.jsx)(n.code,{children:"async"})," function in the ",(0,a.jsx)(n.code,{children:"await"}),". This may mean making the\nfunction ",(0,a.jsx)(n.code,{children:"async"})," or finding an existing ",(0,a.jsx)(n.code,{children:"async"})," function to use instead."]}),"\n",(0,a.jsx)(n.h2,{id:"bad-argument-count",children:"bad-argument-count"}),"\n",(0,a.jsx)(n.p,{children:"This error arises when a function is called with the wrong number of arguments."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def takes_three(one: int, two: int, three: int) -> complex:\n  ...\n\ntake_three(3, 2)  # Expected 1 more positional argument [bad-argument-count]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Note that ",(0,a.jsx)(n.code,{children:"missing-argument"})," will be raised if pyrefly can identify that\nspecific arguments are missing. As such, this error is more likely to appear\nwhen too many args are supplied, rather than too few."]}),"\n",(0,a.jsx)(n.p,{children:"This example shows both kinds of errors:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from typing import Callable\ndef apply(f: Callable[[int, int], int]) -> int:\n    return f(1)  # Expected 1 more positional argument [bad-argument-count]\napply() # Missing argument `f` in function `apply` [missing-argument]\n"})}),"\n",(0,a.jsx)(n.h2,{id:"bad-argument-type",children:"bad-argument-type"}),"\n",(0,a.jsx)(n.p,{children:"This error indicates that the function was called with an argument of the wrong\ntype."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def example(x: int) -> None:\n  ...\nexample(\"one\")  # Argument `Literal['two']` is not assignable to parameter `x` with type `int` in function `example` [bad-argument-type]\n"})}),"\n",(0,a.jsxs)(n.p,{children:["This can also happen with ",(0,a.jsx)(n.code,{children:"*args"})," and ",(0,a.jsx)(n.code,{children:"**kwargs"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bad_args(*args: int) -> None:\n  ...\n\nbad_args(1, \"two\")  # Argument `Literal['two']` is not assignable to parameter with type `int` in function `bad_args` [bad-argument-type]\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"def bad_kwargs(**kwargs: int) -> None:\n  ...\n\nbad_args(x=1, y=\"two\")  # Keyword argument `y` with type `Literal['two']` is not assignable to kwargs type `int` in function `bad_kwargs` [bad-argument-type]\n"})}),"\n",(0,a.jsx)(n.h2,{id:"bad-assignment",children:"bad-assignment"}),"\n",(0,a.jsx)(n.p,{children:"The most common cause of this error is attempting to assign a value that conflicts with the variable's type annotation."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"x: str = 1 # `Literal[1]` is not assignable to `str` [bad-assignment]\n"})}),"\n",(0,a.jsx)(n.p,{children:"However, it can occur in several other situations."}),"\n",(0,a.jsxs)(n.p,{children:["Here, ",(0,a.jsx)(n.code,{children:"x"})," is marked as ",(0,a.jsx)(n.code,{children:"Final"}),", so assigning a new value to it is an error."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"from typing import Final\nx: Final = 1\nx = 2 # `x` is marked final [bad-assignment]\n"})}),"\n",(0,a.jsx)(n.p,{children:"In another case, attempting to annotate an assignment to an instance attribute raises this error."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"class A:\n    x: int\na = A()\na.x: int = 2  # Type cannot be declared in assignment to non-self attribute `a.x` [bad-assignment]\n"})}),"\n",(0,a.jsx)(n.h2,{id:"bad-class-definition",children:"bad-class-definition"}),"\n",(0,a.jsxs)(n.p,{children:["This error indicates that there is something wrong with the class definition.\nIt tends to be a bit rarer, since most issues would be tagged with other error kinds, such as\n",(0,a.jsx)(n.code,{children:"annotation-mismatch"})," or one of the function errors.\ninheritance has its own complexities, so it has its own error kind called ",(0,a.jsx)(n.code,{children:"invalid-inheritance"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"One place you may see it is dynamic class generation:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'from enum import Enum\nEx = Enum("Ex", [("Red", 1), ("Blue", 2), ("Red", 3)])  # Duplicate field `Red` [bad-class-definition]\n'})}),"\n",(0,a.jsx)(n.p,{children:"However, it is best practice to use the class syntax if possible, which doesn't treat duplicate names as an error."}),"\n",(0,a.jsx)(n.h2,{id:"bad-function-definition",children:"bad-function-definition"}),"\n",(0,a.jsxs)(n.p,{children:["Like ",(0,a.jsx)(n.code,{children:"bad-class-definition"}),", this error kind is uncommon because other error kinds are used for more specific issues.\nFor example, argument order is enforced by the parser, so ",(0,a.jsx)(n.code,{children:"def f(x: int = 1, y: str)"})," is a ",(0,a.jsx)(n.code,{children:"parse-error"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"bad-keyword-argument",children:"bad-keyword-argument"}),"\n",(0,a.jsxs)(n.p,{children:["Attempting to call a function with an incorrect keyword argument. e.g. f(x=1,\nx=2), or perhaps f(y=1) (where ",(0,a.jsx)(n.code,{children:"f"})," has no parameter ",(0,a.jsx)(n.code,{children:"y"}),")."]}),"\n",(0,a.jsx)(n.h2,{id:"bad-override",children:"bad-override"}),"\n",(0,a.jsx)(n.p,{children:"A subclass field or method incorrectly overrides a field/method of a parent\nclass."}),"\n",(0,a.jsx)(n.h2,{id:"bad-return",children:"bad-return"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to return a value that does not match the function's return type. Can\nalso arise when returning values from generators."}),"\n",(0,a.jsx)(n.h2,{id:"bad-specialization",children:"bad-specialization"}),"\n",(0,a.jsxs)(n.p,{children:["Attempting to specialize a generic class with incorrect type arguments. e.g.\n",(0,a.jsx)(n.code,{children:"type[int, str]"})," is an error because ",(0,a.jsx)(n.code,{children:"type"})," accepts only 1 type arg."]}),"\n",(0,a.jsx)(n.h2,{id:"bad-unpacking",children:"bad-unpacking"}),"\n",(0,a.jsx)(n.p,{children:"An error caused by unpacking. e.g. attempting to unpack an iterable into the\nwrong number of variables."}),"\n",(0,a.jsx)(n.h2,{id:"match-error",children:"match-error"}),"\n",(0,a.jsx)(n.p,{children:"An error caused by a bad match statement. e.g. Writing a Foo(x, y, z) pattern\nwhen Foo only matches on (x, y)."}),"\n",(0,a.jsx)(n.h2,{id:"missing-attribute",children:"missing-attribute"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to access an attribute that does not exist."}),"\n",(0,a.jsx)(n.h2,{id:"import-error",children:"import-error"}),"\n",(0,a.jsx)(n.p,{children:"An error related to the import machinery. e.g. failed to import a module."}),"\n",(0,a.jsx)(n.h2,{id:"index-error",children:"index-error"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to access a container with an incorrect index. This only occurs when\npyre can statically verify that the index is incorrect."}),"\n",(0,a.jsx)(n.h2,{id:"internal-error",children:"internal-error"}),"\n",(0,a.jsx)(n.p,{children:"Internal Pyre error."}),"\n",(0,a.jsx)(n.h2,{id:"invalid-annotation",children:"invalid-annotation"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to write an annotation that is invalid for some reason."}),"\n",(0,a.jsx)(n.h2,{id:"invalid-argument",children:"invalid-argument"}),"\n",(0,a.jsx)(n.p,{children:"Passing an argument that is invalid for reasons besides type."}),"\n",(0,a.jsx)(n.h2,{id:"invalid-inheritance",children:"invalid-inheritance"}),"\n",(0,a.jsxs)(n.p,{children:["An error caused by incorrect inheritance in a class or type definition. e.g. a\nmetaclass that is not a subclass of ",(0,a.jsx)(n.code,{children:"type"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"invalid-literal",children:"invalid-literal"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to use a value that is not a valid kind of Literal."}),"\n",(0,a.jsx)(n.h2,{id:"invalid-overload",children:"invalid-overload"}),"\n",(0,a.jsx)(n.p,{children:"An error caused by incorrect usage of the @overload decorator. e.g. not defining\nmultiple variants for an overloaded function."}),"\n",(0,a.jsx)(n.h2,{id:"invalid-param-spec",children:"invalid-param-spec"}),"\n",(0,a.jsx)(n.p,{children:"An error related to ParamSpec definition or usage."}),"\n",(0,a.jsx)(n.h2,{id:"invalid-super-call",children:"invalid-super-call"}),"\n",(0,a.jsxs)(n.p,{children:["Attempting to call ",(0,a.jsx)(n.code,{children:"super()"})," in a way that is not allowed. e.g. calling\n",(0,a.jsx)(n.code,{children:"super(Y, x)"})," on an object ",(0,a.jsx)(n.code,{children:"x"})," that does not match the class ",(0,a.jsx)(n.code,{children:"Y"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"invalid-type-var",children:"invalid-type-var"}),"\n",(0,a.jsx)(n.p,{children:"An error caused by incorrect usage or definition of a TypeVar."}),"\n",(0,a.jsx)(n.h2,{id:"invalid-type-var-tuple",children:"invalid-type-var-tuple"}),"\n",(0,a.jsx)(n.p,{children:"An error caused by incorrect usage or definition of a TypeVarTuple."}),"\n",(0,a.jsx)(n.h2,{id:"invalid-yield",children:"invalid-yield"}),"\n",(0,a.jsxs)(n.p,{children:["Attempting to use ",(0,a.jsx)(n.code,{children:"yield"})," in a way that is not allowed. e.g. ",(0,a.jsx)(n.code,{children:"yield from"})," with\nsomething that's not an iterable."]}),"\n",(0,a.jsx)(n.h2,{id:"missing-argument",children:"missing-argument"}),"\n",(0,a.jsx)(n.p,{children:"An error caused by calling a function without all the required arguments. Should\nbe used when we can name the specific arguments that are missing."}),"\n",(0,a.jsx)(n.h2,{id:"missing-module-attribute",children:"missing-module-attribute"}),"\n",(0,a.jsx)(n.p,{children:"Accessing an attribute that does not exist on a module."}),"\n",(0,a.jsx)(n.h2,{id:"no-access",children:"no-access"}),"\n",(0,a.jsx)(n.p,{children:"The attribute exists but does not support this access pattern."}),"\n",(0,a.jsx)(n.h2,{id:"no-matching-overload",children:"no-matching-overload"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to call an overloaded function, but none of the signatures match."}),"\n",(0,a.jsx)(n.h2,{id:"not-a-type",children:"not-a-type"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to use something that isn't a type where a type is expected. This is\na very general error and should be used sparingly."}),"\n",(0,a.jsx)(n.h2,{id:"not-callable",children:"not-callable"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to call a value that is not a callable."}),"\n",(0,a.jsx)(n.h2,{id:"not-iterable",children:"not-iterable"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to use a non-iterable value as an iterable."}),"\n",(0,a.jsx)(n.h2,{id:"parse-error",children:"parse-error"}),"\n",(0,a.jsx)(n.p,{children:"An error related to parsing or syntax."}),"\n",(0,a.jsx)(n.h2,{id:"read-only",children:"read-only"}),"\n",(0,a.jsx)(n.p,{children:"The attribute exists but cannot be modified."}),"\n",(0,a.jsx)(n.h2,{id:"reveal-type",children:"reveal-type"}),"\n",(0,a.jsxs)(n.p,{children:["Raised by a call to ",(0,a.jsx)(n.code,{children:"reveal_type()"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"type-alias-error",children:"type-alias-error"}),"\n",(0,a.jsx)(n.p,{children:"An error related to type alias usage or definition."}),"\n",(0,a.jsx)(n.h2,{id:"typed-dict-key-error",children:"typed-dict-key-error"}),"\n",(0,a.jsx)(n.p,{children:"An error related to TypedDict keys. e.g. attempting to access a TypedDict with a\nkey that does not exist."}),"\n",(0,a.jsx)(n.h2,{id:"unexpected-keyword",children:"unexpected-keyword"}),"\n",(0,a.jsx)(n.p,{children:"An error caused by a keyword argument used in the wrong place."}),"\n",(0,a.jsx)(n.h2,{id:"unknown-name",children:"unknown-name"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to use a name that is not defined."}),"\n",(0,a.jsx)(n.h2,{id:"unsupported-operand",children:"unsupported-operand"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to apply an operator to arguments that do not support it."}),"\n",(0,a.jsx)(n.h2,{id:"unsupported",children:"unsupported"}),"\n",(0,a.jsx)(n.p,{children:"Attempting to use a feature that is not yet supported."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}}}]);