"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[3028],{83028:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>a,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"configuration","title":"Configuration","description":"Configure Pyrefly settings and options","source":"@site/docs/configuration.mdx","sourceDirName":".","slug":"/configuration","permalink":"/en/docs/configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/configuration.mdx","tags":[],"version":"current","frontMatter":{"title":"Configuration","slug":"/configuration","description":"Configure Pyrefly settings and options"},"sidebar":"docsSidebar","previous":{"title":"Installation","permalink":"/en/docs/installation"},"next":{"title":"Migrating to Pyrefly","permalink":"/en/docs/migrating-to-pyrefly"}}');var o=i(74848),s=i(28453);const t={title:"Configuration",slug:"/configuration",description:"Configure Pyrefly settings and options"},l="Pyrefly Configuration",c={},d=[{value:"Precedence in Options",id:"precedence-in-options",level:2},{value:"Type Checking Modes",id:"type-checking-modes",level:2},{value:"Configuration Finding",id:"configuration-finding",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"<code>project_includes</code>",id:"project_includes",level:3},{value:"<code>project_excludes</code>",id:"project_excludes",level:3},{value:"<code>search_path</code>",id:"search_path",level:3},{value:"<code>site_package_path</code>",id:"site_package_path",level:3},{value:"<code>python_platform</code>",id:"python_platform",level:3},{value:"<code>python_version</code>",id:"python_version",level:3},{value:"<code>python_interpreter</code>",id:"python_interpreter",level:3},{value:"<code>errors</code>",id:"errors",level:3},{value:"<code>replace_imports_with_any</code>",id:"replace_imports_with_any",level:3},{value:"<code>ignore_errors_in_generated_code</code>",id:"ignore_errors_in_generated_code",level:3},{value:"<code>use_untyped_imports</code>",id:"use_untyped_imports",level:3},{value:"<code>ignore_missing_source</code>",id:"ignore_missing_source",level:3},{value:"Configuration Details",id:"configuration-details",level:2},{value:"Environment Autoconfiguration",id:"environment-autoconfiguration",level:3},{value:"Filesystem Globbing",id:"filesystem-globbing",level:3},{value:"Module Globbing",id:"module-globbing",level:3},{value:"Example Configuration",id:"example-configuration",level:2},{value:"Default <code>pyrefly.toml</code>",id:"default-pyreflytoml",level:3},{value:"Example <code>pyrefly.toml</code>",id:"example-pyreflytoml",level:3},{value:"Example <code>pyproject.toml</code>",id:"example-pyprojecttoml",level:3}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"pyrefly-configuration",children:"Pyrefly Configuration"})}),"\n",(0,o.jsx)(n.p,{children:"Pyrefly has a basic configuration that can (or will) allow you to customize your\nPyrefly runs without having to specify all of your arguments on the command\nline."}),"\n",(0,o.jsx)(n.p,{children:"NOTE: this is early in its development, so the options listed here are subject\nto change in name, usage, type, quantity, and structure."}),"\n",(0,o.jsxs)(n.p,{children:["Configurations can be specified in a ",(0,o.jsx)(n.a,{href:"https://toml.io/en/",children:"TOML file"})," at the root of\nyour project (or elsewhere, as long as the path-based config options point to the right place) named\n",(0,o.jsx)(n.code,{children:"pyrefly.toml"}),", with all configuration options in the top-level of the document.\nYou can also specify a configuration in a ",(0,o.jsx)(n.code,{children:"pyproject.toml"})," under a ",(0,o.jsx)(n.code,{children:"[tool.pyrefly]"}),"\nsection. Other config names can be used when explicitly passing in the config file\nname with the ",(0,o.jsx)(n.code,{children:"--config"}),"/",(0,o.jsx)(n.code,{children:"-c"})," flag, but they will not be automatically found by\n",(0,o.jsx)(n.a,{href:"#configuration-finding",children:"Configuration Finding"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Both absolute and config-relative paths are supported."}),"\n",(0,o.jsx)(n.h2,{id:"precedence-in-options",children:"Precedence in Options"}),"\n",(0,o.jsx)(n.p,{children:"The following is the order in which configuration options are selected:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"CLI flag"}),"\n",(0,o.jsxs)(n.li,{children:["Environment variable override -- This is the same as ",(0,o.jsx)(n.code,{children:"PYREFLY_<CLI flag name>"})]}),"\n",(0,o.jsx)(n.li,{children:"Configuration option"}),"\n",(0,o.jsx)(n.li,{children:"Hard-coded default"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"type-checking-modes",children:"Type Checking Modes"}),"\n",(0,o.jsx)(n.p,{children:"Pyrefly has two different modes it can run in when type checking your project, which\ncorrespond to different but useful ways we expect most people to interact with Pyrefly:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Project mode: attempt to load a config, falling back to Pyrefly's default config when\nnone can be found, and type check using that one config. This involves getting the\n",(0,o.jsx)(n.a,{href:"#project_includes",children:(0,o.jsx)(n.code,{children:"project_includes"})})," and ",(0,o.jsx)(n.a,{href:"#project_excludes",children:(0,o.jsx)(n.code,{children:"project_excludes"})})," from the file, expanding the patterns,\nand type checking on those files.","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Project mode is used whenever ",(0,o.jsx)(n.code,{children:"-c"}),"/",(0,o.jsx)(n.code,{children:"--config"})," is passed in OR when no files are\nprovided with the CLI invocation."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Per-file or Single-file mode: when given ",(0,o.jsx)(n.a,{href:"#project_includes",children:(0,o.jsx)(n.code,{children:"FILES..."})})," (and optionally ",(0,o.jsx)(n.a,{href:"#project_excludes",children:(0,o.jsx)(n.code,{children:"--project-excludes"})}),")\nduring a CLI invocation, expand the patterns and find the relevant config file for each\nfile listed. ",(0,o.jsx)(n.code,{children:"project_includes"})," and ",(0,o.jsx)(n.code,{children:"project_excludes"})," are ignored from the config file,\nbut it is used for all remaining config options."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-finding",children:"Configuration Finding"}),"\n",(0,o.jsxs)(n.p,{children:["In both project checking mode and single-file checking mode (see ",(0,o.jsx)(n.a,{href:"#type-checking-modes",children:"Type Checking Modes"}),"\nfor more info), we may perform an upward file search to find a\nconfiguration file if one is not provided with ",(0,o.jsx)(n.code,{children:"-c"}),"/",(0,o.jsx)(n.code,{children:"--config"}),". We each directory\nfrom the 'start location' to the filesystem root, looking first for ",(0,o.jsx)(n.code,{children:"pyrefly.toml"})," then ",(0,o.jsx)(n.code,{children:"pyproject.toml"}),", in\nthe same directory before looking at its parent."]}),"\n",(0,o.jsx)(n.p,{children:"For project checking mode, the 'start location' is current working directory. For single-file checking mode,\nthe start location is the directory containing each file to be type checked, and\nwe find the config for each file matched by the pattern provided. No\nconfig flag can be passed into Pyrefly in single file checking mode, since the behavior\nis very ambiguous (would we apply the given config to each file? should the config\noverride all settings, or just some of them?, ...)."}),"\n",(0,o.jsxs)(n.p,{children:["If a ",(0,o.jsx)(n.code,{children:"pyrefly.toml"})," is found, it is parsed and used for type checking, and will\nreturn an error to the user on invalid types, syntax, values, or unknown config options."]}),"\n",(0,o.jsxs)(n.p,{children:["If a ",(0,o.jsx)(n.code,{children:"pyproject.toml"})," is found, Pyrefly will use the ",(0,o.jsx)(n.code,{children:"[tool.pyrefly]"}),"\nsection if it exists, otherwise it will assume a default config.\nThe same errors will be returned as when loading a ",(0,o.jsx)(n.code,{children:"pyrefly.toml"})," if\nthe config is invalid."]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,o.jsxs)(n.p,{children:["The following section lists all recognized options that can be specified in a config\nfile or ",(0,o.jsx)(n.code,{children:"pyproject.toml"})," Pyrefly config section."]}),"\n",(0,o.jsx)(n.h3,{id:"project_includes",children:(0,o.jsx)(n.code,{children:"project_includes"})}),"\n",(0,o.jsx)(n.p,{children:"The glob patterns used to describe which files to type\ncheck, typically understood as user-space files."}),"\n",(0,o.jsxs)(n.p,{children:["This does not specify\n",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution",children:"Import Resolution"})," priority or the path an\nimport should be resolved from. See ",(0,o.jsx)(n.a,{href:"#search_path",children:(0,o.jsx)(n.code,{children:"search_path"})})," instead."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: list of ",(0,o.jsx)(n.a,{href:"#filesystem-globbing",children:"filesystem glob patterns"})]}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:'["**/*.py", "**/*.pyi"]'})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"FILES..."})," argument"]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"include"})," in Pyright, ",(0,o.jsx)(n.code,{children:"files"}),"/",(0,o.jsx)(n.code,{children:"modules"}),"/",(0,o.jsx)(n.code,{children:"packages"})," in\nmypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["When overridden by passing in ",(0,o.jsx)(n.code,{children:"FILES..."}),", we do not consult the\nrelevant config file for what to use for ",(0,o.jsx)(n.code,{children:"project_excludes"}),". If\n",(0,o.jsx)(n.code,{children:"project_excludes"})," should not use the default value, override it with the flag as\nwell."]}),"\n",(0,o.jsxs)(n.li,{children:["When a ",(0,o.jsx)(n.code,{children:"project_includes"})," pattern does not match any files, we will return\nan error."]}),"\n",(0,o.jsx)(n.li,{children:"If you get an error about no matches for a directory when passing a glob as a CLI\nargument, try wrapping the glob in quotes to prevent eager shell glob expansion."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"project_excludes",children:(0,o.jsx)(n.code,{children:"project_excludes"})}),"\n",(0,o.jsxs)(n.p,{children:["The glob patterns used to describe which files to avoid\ntype checking as way to filter files that match ",(0,o.jsx)(n.code,{children:"project_includes"}),",\nbut we don't want to type check."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: list of ",(0,o.jsx)(n.a,{href:"#filesystem-globbing",children:"filesystem glob patterns"})]}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:'["**/__pycache__/**", "**/.[!/.]*"]'})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--project-excludes"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"exclude"})," in Pyright and mypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["It is an error if no files are returned from any ",(0,o.jsx)(n.code,{children:"project_includes"})," because\nthey are filtered out by ",(0,o.jsx)(n.code,{children:"project_excludes"})," entries. We differentiate between\nan error from a ",(0,o.jsx)(n.code,{children:"project_includes"})," that doesn't match any files, and an error\nfrom all ",(0,o.jsx)(n.code,{children:"project_includes"})," getting filtered by ",(0,o.jsx)(n.code,{children:"project_excludes"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["When passing in ",(0,o.jsx)(n.code,{children:"FILES..."}),", we also do not consult the config file for\nwhat to use for ",(0,o.jsx)(n.code,{children:"project_excludes"}),". If ",(0,o.jsx)(n.code,{children:"project_excludes"})," should not use\nthe default value, override it with a flag as well. When no ",(0,o.jsx)(n.code,{children:"FILES..."})," are passed,\n",(0,o.jsx)(n.code,{children:"project_excludes"})," overrides the config's value."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"search_path",children:(0,o.jsx)(n.code,{children:"search_path"})}),"\n",(0,o.jsxs)(n.p,{children:["A file path describing the roots from which imports should be\nfound and imported from (including modules in ",(0,o.jsx)(n.a,{href:"#project_includes",children:(0,o.jsx)(n.code,{children:"project_includes"})}),"). This takes\nthe ",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution#absolute-imports",children:"highest precedence in import order"}),",\nbefore ",(0,o.jsx)(n.code,{children:"typeshed"})," and ",(0,o.jsx)(n.a,{href:"#site_package_path",children:(0,o.jsx)(n.code,{children:"site_package_path"})}),". When a ",(0,o.jsx)(n.code,{children:"project_includes"}),"\ntype checked file is imported by another type checked file, we check all search roots to\ndetermine how to import it."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: list of directories specifying the root"}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:'["."]'})]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--search-path"})]}),"\n",(0,o.jsxs)(n.li,{children:["ENV equivalent: ",(0,o.jsx)(n.code,{children:"PYREFLY_SEARCH_PATH"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"extraPaths"})," in Pyright, ",(0,o.jsx)(n.code,{children:"mypy_path"})," in mypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["We automatically append ",(0,o.jsx)(n.code,{children:'"."'})," (the directory containing the\nconfiguration file) to the ",(0,o.jsx)(n.code,{children:"search_roots"})," when type checking as a sensible\ndefault and last attempt at an import."]}),"\n",(0,o.jsxs)(n.li,{children:["Libraries should not be listed here, since they may override ",(0,o.jsx)(n.code,{children:"typeshed"}),"\nvalues for your whole project, and have different import semantics with\nrespect to typing. See\n",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution",children:"Import Resolution"}),"\nfor more information about how modules are imported."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"site_package_path",children:(0,o.jsx)(n.code,{children:"site_package_path"})}),"\n",(0,o.jsxs)(n.p,{children:["A file path describing a root from which imports should\nbe found and imported from. This takes the lowest priority in import\nresolution, after ",(0,o.jsx)(n.a,{href:"#search_path",children:(0,o.jsx)(n.code,{children:"search_path"})})," and ",(0,o.jsx)(n.code,{children:"typeshed"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"site_package_path"})," entries have special rules around when they can be imported,\naccording to the typing specification. See\n",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution#site-package-path-typing-rules",children:"Site Package Path Typing Rules"}),"\nfor more information, and ",(0,o.jsx)(n.a,{href:"#use_untyped_imports",children:(0,o.jsx)(n.code,{children:"use_untyped_imports"})})," and\n",(0,o.jsx)(n.a,{href:"#ignore_missing_source",children:(0,o.jsx)(n.code,{children:"ignore_missing_source"})})," for details on how to configure\nthat behavior."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: list of directories"}),"\n",(0,o.jsxs)(n.li,{children:["Default: result from ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration"}),", or\n",(0,o.jsx)(n.code,{children:"[]"})," if the Python interpreter cannot be queried"]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--site-package-path"})]}),"\n",(0,o.jsxs)(n.li,{children:["ENV equivalent: ",(0,o.jsx)(n.code,{children:"PYREFLY_SITE_PACKAGE_PATH"})]}),"\n",(0,o.jsx)(n.li,{children:"Equivalent configs: none"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["NOTE: Ideally, this should not be set manually, unless you're using a venv, running one-off tests,\ntesting specific behavior, or having trouble with ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration"}),".\nSetting this explicitly, especially when not using a venv, will make it difficult for your configuration\nto be reused between different systems and platforms."]}),"\n",(0,o.jsx)(n.h3,{id:"python_platform",children:(0,o.jsx)(n.code,{children:"python_platform"})}),"\n",(0,o.jsxs)(n.p,{children:["The value used with conditions based on type checking\nagainst\n",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/sys.html#sys.platform",children:(0,o.jsx)(n.code,{children:"sys.platform"})}),"\nvalues."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: string"}),"\n",(0,o.jsxs)(n.li,{children:["Default: result from ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration"}),', or\n"linux" if the Python interpreter cannot be queried']}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--python-platform"})]}),"\n",(0,o.jsxs)(n.li,{children:["ENV equivalent: ",(0,o.jsx)(n.code,{children:"PYREFLY_PYTHON_PLATFORM"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"pythonPlatform"})," in Pyright, ",(0,o.jsx)(n.code,{children:"platform"})," in mypy"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"python_version",children:(0,o.jsx)(n.code,{children:"python_version"})}),"\n",(0,o.jsxs)(n.p,{children:["The value used with conditions based on type checking\nagainst\n",(0,o.jsx)(n.a,{href:"https://docs.python.org/3/library/sys.html#sys.version",children:(0,o.jsx)(n.code,{children:"sys.version"})}),"\nvalues. The format should be ",(0,o.jsx)(n.code,{children:"<major>[.<minor>[.<micro>]]"}),", where minor and\nmicro can be omitted to take the default positional value."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: string of the format ",(0,o.jsx)(n.code,{children:"<major>[.<minor>[.<micro>]]"})]}),"\n",(0,o.jsxs)(n.li,{children:["Default: result from ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration"}),", or\n",(0,o.jsx)(n.code,{children:"3.13.0"})," if the Python interpreter cannot be queried"]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--python-version"})]}),"\n",(0,o.jsxs)(n.li,{children:["ENV equivalent: ",(0,o.jsx)(n.code,{children:"PYREFLY_PYTHON_VERSION"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"pythonVersion"})," in Pyright, ",(0,o.jsx)(n.code,{children:"python_version"})," in mypy"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"python_interpreter",children:(0,o.jsx)(n.code,{children:"python_interpreter"})}),"\n",(0,o.jsxs)(n.p,{children:["The Python interpreter to query when attempting to autoconfigure\nPython environment values (",(0,o.jsx)(n.code,{children:"site_package_path"}),", ",(0,o.jsx)(n.code,{children:"python_platform"}),", ",(0,o.jsx)(n.code,{children:"python_version"}),").\nSee the ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration section"})," for more information."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: path to executable"}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"$(which python3)"}),", then ",(0,o.jsx)(n.code,{children:"$(which python)"}),", or none"]}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--python-interpreter"})]}),"\n",(0,o.jsxs)(n.li,{children:["ENV equivalent: ",(0,o.jsx)(n.code,{children:"PYREFLY_PYTHON_INTERPRETER"})]}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"python_executable"})," in mypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["This executes the value present in the ",(0,o.jsx)(n.code,{children:"python_interpreter"})," field without any checks. It could\nbe a security risk if your ",(0,o.jsx)(n.code,{children:"python_interpreter"})," is an arbitrary executable."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["NOTE: Ideally, this should not be set manually, unless you're using a venv, running one-off tests,\ntesting specific behavior, or having trouble with ",(0,o.jsx)(n.a,{href:"#environment-autoconfiguration",children:"Environment Autoconfiguration"}),".\nSetting this explicitly, especially when not using a venv, will make it difficult for your configuration\nto be reused between different systems and platforms."]}),"\n",(0,o.jsx)(n.h3,{id:"errors",children:(0,o.jsx)(n.code,{children:"errors"})}),"\n",(0,o.jsxs)(n.p,{children:["Configure (enable and disable) the errors Pyrefly emits. ",(0,o.jsx)(n.code,{children:"true"})," (default) tells Pyrefly to\nemit the error, while ",(0,o.jsx)(n.code,{children:"false"})," tells Pyrefly to hide it."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Type: Table of ",(0,o.jsx)(n.a,{href:"/en/docs/error-kinds",children:"error code"})," to boolean representing enabled status"]}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"errors = {}"}),"/",(0,o.jsx)(n.code,{children:"[errors]"})]}),"\n",(0,o.jsx)(n.li,{children:"Flag equivalent: none"}),"\n",(0,o.jsx)(n.li,{children:"ENV equivalent: none"}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs:\n",(0,o.jsx)(n.a,{href:"https://microsoft.github.io/pyright/#/configuration?id=type-check-rule-overrides",children:"type check rule overrides"}),"\nand ",(0,o.jsx)(n.a,{href:"https://microsoft.github.io/pyright/#/configuration?id=type-evaluation-settings",children:"type evaluation settings"}),"\nin Pyright,\n",(0,o.jsx)(n.a,{href:"https://mypy.readthedocs.io/en/stable/config_file.html#confval-enable_error_code",children:(0,o.jsx)(n.code,{children:"enable_error_code"})})," and\n",(0,o.jsx)(n.a,{href:"https://mypy.readthedocs.io/en/stable/config_file.html#confval-disable_error_code",children:(0,o.jsx)(n.code,{children:"disable_error_code"})}),"\nin mypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes: setting ",(0,o.jsx)(n.code,{children:"<error-code> = true"})," is the same as having no error code configuration present, which means\nthe error will be shown. Setting ",(0,o.jsx)(n.code,{children:"<error-code> = false"})," will disable the error for type checking."]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"replace_imports_with_any",children:(0,o.jsx)(n.code,{children:"replace_imports_with_any"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"#module-globbing",children:(0,o.jsx)(n.code,{children:"ModuleGlob"})}),"s of modules from which import errors should be\nignored, and the module should be replaced with ",(0,o.jsx)(n.code,{children:"typing.Any"}),". For example, with\n",(0,o.jsx)(n.code,{children:"from x.y import z"})," in a file, adding ",(0,o.jsx)(n.code,{children:"x.*"}),", ",(0,o.jsx)(n.code,{children:"*.y"}),", or ",(0,o.jsx)(n.code,{children:"x.y"})," to this config will\nsilence those import errors and replace the module with ",(0,o.jsx)(n.code,{children:"typing.Any"}),". If the module can be found, its type\ninformation will still be replaced with ",(0,o.jsx)(n.code,{children:"typing.Any"}),"."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: list of regex"}),"\n",(0,o.jsxs)(n.li,{children:["Default: ",(0,o.jsx)(n.code,{children:"[]"})]}),"\n",(0,o.jsx)(n.li,{children:"Flag equivalent: none"}),"\n",(0,o.jsx)(n.li,{children:"ENV equivalent: none"}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"ignore_missing_imports"})," or ",(0,o.jsx)(n.code,{children:"follow_imports = skip"})," in mypy"]}),"\n",(0,o.jsxs)(n.li,{children:["Notes:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"errors = {import-error = false}"})," (TOML inline table for ",(0,o.jsx)(n.code,{children:"errors"}),") has similar behavior in Pyrefly, but ignores\n",(0,o.jsx)(n.em,{children:"all"})," import errors instead of import errors from specific modules, and won't replace findable modules with ",(0,o.jsx)(n.code,{children:"typing.Any"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"ignore_errors_in_generated_code",children:(0,o.jsx)(n.code,{children:"ignore_errors_in_generated_code"})}),"\n",(0,o.jsxs)(n.p,{children:["Whether to ignore type errors in generated code. If enabled, generated files\nwill be treated as if they are included in ",(0,o.jsx)(n.code,{children:"project_excludes"}),".\nThe generated code status is determined by checking if the file contents contain\nthe substring '",(0,o.jsx)("span",{children:"@"}),"generated'."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: bool"}),"\n",(0,o.jsx)(n.li,{children:"Default: false"}),"\n",(0,o.jsxs)(n.li,{children:["Flag equivalent: ",(0,o.jsx)(n.code,{children:"--ignore-errors-in-generated-code"})]}),"\n",(0,o.jsxs)(n.li,{children:["ENV equivalent: ",(0,o.jsx)(n.code,{children:"IGNORE_ERRORS_IN_GENERATED_CODE"})]}),"\n",(0,o.jsx)(n.li,{children:"Equivalent configs: none"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"use_untyped_imports",children:(0,o.jsx)(n.code,{children:"use_untyped_imports"})}),"\n",(0,o.jsxs)(n.p,{children:["Whether to search imports in ",(0,o.jsx)(n.a,{href:"#site_package_path",children:(0,o.jsx)(n.code,{children:"site_package_path"})})," that do not have a\n",(0,o.jsx)(n.code,{children:"py.typed"})," file unconditionally. When this is true, we skip any checks for ",(0,o.jsx)(n.code,{children:"py.typed"})," files,\nand return the first valid import we can find. See\n",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution#site-package-path-typing-rules",children:"Site Package Path Typing Rules"})," for\nmore information on when a ",(0,o.jsx)(n.code,{children:"site_package_path"})," cannot be used for typing information."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Type: bool"}),"\n",(0,o.jsx)(n.li,{children:"Default: true"}),"\n",(0,o.jsx)(n.li,{children:"Flag equivalent: none"}),"\n",(0,o.jsx)(n.li,{children:"ENV equivalent: none"}),"\n",(0,o.jsxs)(n.li,{children:["Equivalent configs: ",(0,o.jsx)(n.code,{children:"useLibraryCodeForTypes"})," in Pyright, ",(0,o.jsx)(n.code,{children:"follow_untyped_imports"})," in mypy"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"ignore_missing_source",children:(0,o.jsx)(n.code,{children:"ignore_missing_source"})}),"\n",(0,o.jsxs)(n.p,{children:["Whether to skip the check for a non-stubs package when a ",(0,o.jsx)(n.code,{children:"-stubs"})," package is found in\n",(0,o.jsx)(n.a,{href:"#site_package_path",children:(0,o.jsx)(n.code,{children:"site_package_path"})}),". When this is true, we immediately return\na ",(0,o.jsx)(n.code,{children:"-stubs"})," package when found."]}),"\n",(0,o.jsxs)(n.p,{children:["The check for a non-stubs package exists to ensure you have an importable package to use\nin your project. When this check returns an import error, it means we couldn't find a package,\nand that at runtime you may not actually be able to import the given package, even if its\ntype stubs could be found. See\n",(0,o.jsx)(n.a,{href:"/en/docs/import-resolution#stub-files-vs-source-files",children:"Stub Files vs Source Files"})," for more information."]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-details",children:"Configuration Details"}),"\n",(0,o.jsx)(n.p,{children:"This section describes some of the configuration options, behaviors, or types in more depth, when\nthere are details shared between multiple config options or the information is more than what\ncan fit under a single config option description."}),"\n",(0,o.jsx)(n.h3,{id:"environment-autoconfiguration",children:"Environment Autoconfiguration"}),"\n",(0,o.jsxs)(n.p,{children:["If any of ",(0,o.jsx)(n.a,{href:"#python_platform",children:(0,o.jsx)(n.code,{children:"python_platform"})}),", ",(0,o.jsx)(n.a,{href:"#python_version",children:(0,o.jsx)(n.code,{children:"python_version"})}),", or\n",(0,o.jsx)(n.a,{href:"#site_package_path",children:(0,o.jsx)(n.code,{children:"site_package_path"})})," are empty, we attempt to query an interpreter\nfor the missing values. By default we query ",(0,o.jsx)(n.code,{children:"$(which python3)"})," or ",(0,o.jsx)(n.code,{children:"$(which python)"})," if they're available on the path,\nbut the interpreter can be overridden with the ",(0,o.jsx)(n.a,{href:"#python_interpreter",children:(0,o.jsx)(n.code,{children:"python_interpreter"})})," config option and flag.\nIf the interpreter does not exist, we fall back to Pyrefly's defaults for all unspecified values."]}),"\n",(0,o.jsx)(n.p,{children:"The values queried from the interpreter are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"python_platform"}),": ",(0,o.jsx)(n.code,{children:"sys.platform"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"python_version"}),": ",(0,o.jsx)(n.code,{children:"sys.version_info[:3]"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"site_package_path"}),": ",(0,o.jsx)(n.code,{children:"site.getsitepackages() + [site.getusersitepackages()]"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"filesystem-globbing",children:"Filesystem Globbing"}),"\n",(0,o.jsxs)(n.p,{children:["We use a standard Unix-style glob, which allows for wildcard matching when specifying a fileset. It is similar\nto regex, but more restricted given the subset of allowed syntax for paths on a filesystem. We currently only\nallow matching files with a ",(0,o.jsx)(n.code,{children:".py"})," or ",(0,o.jsx)(n.code,{children:".pyi"})," suffix."]}),"\n",(0,o.jsx)(n.p,{children:"The globs provided are relative to the config, if one is found, or the current working directory otherwise.\nAbsolute path globs can also be provided, though this is generally not recommended, since it may not\nbe compatible with other systems type checking your project."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["We recognize the following wildcards:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"*"}),", which matches zero or more characters in a single directory component"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"**"}),", which matches the current and any sub directories/files in those sub directories"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"?"}),", which matches any one character"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"[<pattern>]"}),", which matches any character or character range between the brackets (character range separated by ",(0,o.jsx)(n.code,{children:"-"}),")"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"[!<pattern>]"}),", which excludes any character or character range between the brackets and after the ",(0,o.jsx)(n.code,{children:"!"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"[]"})," can be used to match ",(0,o.jsx)(n.code,{children:"?"}),", ",(0,o.jsx)(n.code,{children:"*"}),", ",(0,o.jsx)(n.code,{children:"["}),", ",(0,o.jsx)(n.code,{children:"]"})," literally (e.g. ",(0,o.jsx)(n.code,{children:"[?]"}),"), although these are invalid as part of a Python path."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["We also support non-wildcard paths, so a relative (or absolute) path like ",(0,o.jsx)(n.code,{children:"src/"})," will match all Python files under ",(0,o.jsx)(n.code,{children:"src/"}),"\nor ",(0,o.jsx)(n.code,{children:"src/my_file.py"})," will match ",(0,o.jsx)(n.code,{children:"src/my_file.py"})," exactly."]}),"\n",(0,o.jsxs)(n.p,{children:["Any directories matched will also have their ",(0,o.jsx)(n.code,{children:".py"})," and ",(0,o.jsx)(n.code,{children:".pyi"})," files recursively matched. ",(0,o.jsx)(n.code,{children:"src/*"})," will match all files and\ndirectories under ",(0,o.jsx)(n.code,{children:"src/"}),", so therefore, we will recursively match everything under ",(0,o.jsx)(n.code,{children:"src/"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Examples:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"src/**/*.py"}),": only match ",(0,o.jsx)(n.code,{children:".py"})," files under ",(0,o.jsx)(n.code,{children:"src/"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"src"}),", ",(0,o.jsx)(n.code,{children:"src/"}),", ",(0,o.jsx)(n.code,{children:"src/*"}),", ",(0,o.jsx)(n.code,{children:"src/**"}),", and ",(0,o.jsx)(n.code,{children:"src/**/*"}),": match all ",(0,o.jsx)(n.code,{children:".py"})," and ",(0,o.jsx)(n.code,{children:".pyi"})," files under `src/"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"?.py"})," and ",(0,o.jsx)(n.code,{children:"[A-z].py"}),": match any file that looks like ",(0,o.jsx)(n.code,{children:"<letter>.py"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"src/path/to/my/file.py"}),": only match ",(0,o.jsx)(n.code,{children:"src/path/to/my/file.py"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"src/**/tests"}),", ",(0,o.jsx)(n.code,{children:"src/**/tests/"}),", ",(0,o.jsx)(n.code,{children:"src/**/tests/**"}),", and ",(0,o.jsx)(n.code,{children:"src/**/tests/**/*"}),": match all ",(0,o.jsx)(n.code,{children:".py"})," and ",(0,o.jsx)(n.code,{children:".pyi"})," files in ",(0,o.jsx)(n.code,{children:"src/"}),"\nunder a directory named ",(0,o.jsx)(n.code,{children:"tests"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"module-globbing",children:"Module Globbing"}),"\n",(0,o.jsxs)(n.p,{children:["In some config options, we've added globbing for module paths. This is different from both path globs and regex,\nin the sense that we're performing a match on a Python dotted import, such as ",(0,o.jsx)(n.code,{children:"this.is.any.module"}),".\nThe only wildcard we recognize is ",(0,o.jsx)(n.code,{children:"*"}),", which represents zero or more segments of a module path, unless it starts a glob,\nin which case it must match one or more segments. The wildcard must be surrounded\nby ",(0,o.jsx)(n.code,{children:"."}),", unless it is at the start or end of a module glob."]}),"\n",(0,o.jsx)(n.p,{children:"Examples:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"this.is.a.module"})," would be equivalent to a regex like ",(0,o.jsx)(n.code,{children:"^this\\.is\\.a\\.module"}),". It will only match imports that look like\n",(0,o.jsx)(n.code,{children:"this.is.a.module"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"this.is.*.module"})," would become ",(0,o.jsx)(n.code,{children:"^this\\.is(\\..+)*\\.module$"}),". It would match:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is.module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is.a.module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is.a.really.long.path.to.a.module"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"*.my.module"})," would be equivalent to a regex like ",(0,o.jsx)(n.code,{children:"^.+\\.my\\.module$"}),".","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["It would match:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is.my.module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"heres.my.module"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["It will not match:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"my.module"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"this.is.*"})," would be equivalent to a regex like ",(0,o.jsx)(n.code,{children:"^this\\.is(\\..+)*"}),". It would match:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is.my.module"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"this.is"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"example-configuration",children:"Example Configuration"}),"\n",(0,o.jsx)(n.p,{children:"This section displays an example config showing the usage of all config options listed above to make creating\nyour own easier, and to give you an easy place to start."}),"\n",(0,o.jsxs)(n.h3,{id:"default-pyreflytoml",children:["Default ",(0,o.jsx)(n.code,{children:"pyrefly.toml"})]}),"\n",(0,o.jsx)(n.p,{children:"This is a configuration with the Pyrefly defaults. If you have an\ninterpreter installed, some of these values may be overridden."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'#### configuring what to type check and where to import from\nproject_includes = ["."]\nproject_excludes = ["**/__pycache__/**", "**/.[!/.]*"]\nsearch_path = ["."]\nsite_package_path = []\n\n#### configuring your python environment\npython_platform = "linux"\npython_version = "3.13"\n# default is null/none\n# python_interpreter = null\n\n#### configuring your type check settings\n\nreplace_imports_with_any = []\nignore_errors_in_generated_code = false\nuse_untyped_imports = false\nignore_missing_source = false\n\n[errors]\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"example-pyreflytoml",children:["Example ",(0,o.jsx)(n.code,{children:"pyrefly.toml"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'#### configuring what to type check and where to import from\nproject_includes = ["src"]\nproject_excludes = ["**/__pycache__/**", "**/.[!/.]*", "**/tests"]\nsearch_path = ["src"]\nsite_package_path = ["venv/lib/python3.12/site-packages"]\n\n#### configuring your python environment\npython_platform = "linux"\npython_version = "3.12"\npython_interpreter = "venv/bin/python3"\n\n#### configuring your type check settings\nreplace_imports_with_any = [\n  "sympy.*",\n  "*.series",\n]\n\nignore_errors_in_generated_code = true\nuse_untyped_imports = true\nignore_missing_source = true\n\n[errors]\nbad-assignment = false\ninvalid-argument = false\n'})}),"\n",(0,o.jsxs)(n.h3,{id:"example-pyprojecttoml",children:["Example ",(0,o.jsx)(n.code,{children:"pyproject.toml"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'...\n\n# Pyrefly header\n[pyrefly]\n\n#### configuring what to type check and where to import from\nproject_includes = ["src"]\nproject_excludes = ["**/__pycache__/**", "**/.[!/.]*", "**/tests"]\nsearch_path = ["src"]\nsite_package_path = ["venv/lib/python3.12/site-packages"]\n\n#### configuring your python environment\npython_platform = "linux"\npython_version = "3.12"\npython_interpreter = "venv/bin/python3"\n\n#### configuring your type check settings\nreplace_imports_with_any = [\n  "sympy.*",\n  "*.series",\n]\n\nignore_errors_in_generated_code = true\nuse_untyped_imports = true\nignore_missing_source = true\n\n[pyrefly.errors]\nbad-assignment = false\ninvalid-argument = false\n\n# other non-Pyrefly configs\n...\n'})})]})}function a(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}}}]);