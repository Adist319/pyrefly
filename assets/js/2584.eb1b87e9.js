"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[2584],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>d,MDXProvider:()=>y,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>c});var r=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(){return l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),c=function(e){return function(t){var n=p(t.components);return r.createElement(e,l({},t,{components:n}))}},p=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},y=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,a=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),y=o,m=c["".concat(a,".").concat(y)]||c[y]||u[y]||l;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var d=2;d<l;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},78478:(e,t,n)=>{n.d(t,{A:()=>l});var r=n(96540),o=n(92303);function l(e){let{children:t,fallback:n}=e;return(0,o.default)()?r.createElement(r.Fragment,null,null==t?void 0:t()):null!=n?n:null}},62584:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>y,contentTitle:()=>c,default:()=>f,frontMatter:()=>d,metadata:()=>p,toc:()=>u});var r=n(58168),o=n(96540),l=n(15680),a=n(78478);const i=o.lazy((()=>Promise.all([n.e(1869),n.e(7456),n.e(3757)]).then(n.bind(n,3757))));function s(e){let{editorHeight:t,codeSample:n}=e;return o.createElement(a.A,null,(()=>o.createElement(o.Suspense,{fallback:o.createElement("div",null,"Loading...")},o.createElement(i,{editorHeight:t,codeSample:n}))))}const d={title:"Learning Python Types",description:"Get to know Python's Type System with working examples",displayed_sidebar:"docsSidebar",spug:"/"},c="Give Pyrefly a try with some working examples",p={unversionedId:"learn-python-typing",id:"learn-python-typing",title:"Learning Python Types",description:"Get to know Python's Type System with working examples",source:"@site/docs/learn-python-typing.mdx",sourceDirName:".",slug:"/learn-python-typing",permalink:"/en/docs/learn-python-typing",draft:!1,editUrl:"https://github.com/facebook/pyre-check/pyre2/edit/main/website/docs/learn-python-typing.mdx",tags:[],version:"current",frontMatter:{title:"Learning Python Types",description:"Get to know Python's Type System with working examples",displayed_sidebar:"docsSidebar",spug:"/"},sidebar:"docsSidebar"},y={},u=[{value:"Generics",id:"generics",level:2},{value:"Protocols",id:"protocols",level:2},{value:"Dataclasses",id:"dataclasses",level:2},{value:"TypedDict",id:"typeddict",level:2},{value:"Overloads",id:"overloads",level:2}],m={toc:u};function f(e){let{components:t,...n}=e;return(0,l.mdx)("wrapper",(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"give-pyrefly-a-try-with-some-working-examples"},"Give Pyrefly a try with some working examples"),(0,l.mdx)("p",null,"Python's type system is a powerful tool that helps you write more maintainable, readable, and efficient code. With the help of type hints, you can catch errors early, improve code completion, and make your code more self-documenting.\nIn this guide, we'll explore the different features of Python's type system, including generics, protocols, dataclasses, typed dictionaries, and overloads. Each section includes a brief description of the feature, along with a working example that you can try out using Pyrefly."),(0,l.mdx)("h2",{id:"generics"},"Generics"),(0,l.mdx)("p",null,"Generics allow you to define reusable functions and classes that work with multiple types. This feature enables you to write more flexible and adaptable code."),(0,l.mdx)("pre",null,(0,l.mdx)(s,{editorHeight:200,codeSample:"# Example: Generic Classes\n\n  from typing import reveal_type\n\n  class C[T]:\n      def __init__(self, x: T):\n          self.x = x\n      def box(self) -> list[T]:\n          return [self.x]\n\n  c = C(0)\n  reveal_type(c.box())  # revealed type: list[int]\n  ",mdxType:"TryPyre2BrowserOnly"})),(0,l.mdx)("h2",{id:"protocols"},"Protocols"),(0,l.mdx)("p",null,"Protocols enable structural typing, which allows you to define interfaces without explicit inheritance. This feature helps you write more modular and composable code."),(0,l.mdx)("pre",null,(0,l.mdx)(s,{editorHeight:200,codeSample:'# Example: Structural Typing with Protocols\nfrom typing import Iterable, Protocol\n\nclass Writer(Protocol):\n    def write(self) -> None: ...\n\nclass GoodWorld:\n    def write(self) -> None:\n        print("Hello world!")\n\nclass BadWorld:\n    pass\n\ndef f(writer: Writer):\n    pass\n\nf(GoodWorld()) # OK\nf(BadWorld())  # ERROR!\n    ',mdxType:"TryPyre2BrowserOnly"})),(0,l.mdx)("h2",{id:"dataclasses"},"Dataclasses"),(0,l.mdx)("p",null,"Protocols enable structural typing, which allows you to define interfaces without explicit inheritance. This feature helps you write more modular and composable code."),(0,l.mdx)("pre",null,(0,l.mdx)(s,{editorHeight:200,codeSample:'# Example: Dataclasses\n  from dataclasses import dataclass\n  @dataclass\n  class Point:\n      x: float\n      y: float\n  Point(x=0.0, y=0.0)    # OK\n  Point(x=0.0, y="oops") # ERROR!\n    ',mdxType:"TryPyre2BrowserOnly"})),(0,l.mdx)("h2",{id:"typeddict"},"TypedDict"),(0,l.mdx)("p",null,"Typed dictionaries enable you to define dictionaries with specific key-value types. This feature helps you write more robust and maintainable code."),(0,l.mdx)("pre",null,(0,l.mdx)(s,{editorHeight:200,codeSample:'# Example: TypedDict\n\nfrom typing import TypedDict\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n\ngood_movie: Movie = {"name": "Toy Story", "year": 1995} # OK\nbad_movie: Movie = {"name": "The Room", "year": "2003"}  # ERROR!\n    ',mdxType:"TryPyre2BrowserOnly"})),(0,l.mdx)("h2",{id:"overloads"},"Overloads"),(0,l.mdx)("p",null,"Overloads allow you to define multiple function signatures for a single function. This feature helps you write more flexible and adaptable code."),(0,l.mdx)("pre",null,(0,l.mdx)(s,{editorHeight:200,codeSample:'# Example: Overloads\nfrom typing import overload, reveal_type\n\n@overload\ndef f(x: int) -> int: ...\n\n@overload\ndef f(x: str) -> str: ...\n\ndef f(x: int | str) -> int | str:\n    return x\n\nreveal_type(f(0))  # revealed type: int\nreveal_type(f("")) # revealed type: str\n    ',mdxType:"TryPyre2BrowserOnly"})))}f.isMDXComponent=!0}}]);