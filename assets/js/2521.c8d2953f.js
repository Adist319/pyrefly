"use strict";(self.webpackChunknew_website=self.webpackChunknew_website||[]).push([[2521],{12521:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"migrating-from-mypy","title":"Migrating from Mypy","description":"How to switch from Mypy to Pyrefly","source":"@site/docs/migrating-from-mypy.mdx","sourceDirName":".","slug":"/migrating-from-mypy","permalink":"/en/docs/migrating-from-mypy","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/pyrefly/edit/main/website/docs/migrating-from-mypy.mdx","tags":[],"version":"current","frontMatter":{"title":"Migrating from Mypy","description":"How to switch from Mypy to Pyrefly"},"sidebar":"docsSidebar","previous":{"title":"Migrating to Pyrefly","permalink":"/en/docs/migrating-to-pyrefly"},"next":{"title":"Migrating from Pyright","permalink":"/en/docs/migrating-from-pyright"}}');var o=n(74848),s=n(28453);const l={title:"Migrating from Mypy",description:"How to switch from Mypy to Pyrefly"},t=void 0,c={},d=[{value:"Running Pyrefly",id:"running-pyrefly",level:2},{value:"Mypy Config Migration",id:"mypy-config-migration",level:2},{value:"Config Migration Details",id:"config-migration-details",level:3},{value:"Silencing Errors",id:"silencing-errors",level:2}];function a(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h2,{id:"running-pyrefly",children:"Running Pyrefly"}),"\n",(0,o.jsx)(i.p,{children:"Like mypy, pyrefly can be given a list of files to check:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-sh",children:"$ pyrefly check file1.py file2.py\n"})}),"\n",(0,o.jsx)(i.p,{children:"The easiest way to run pyrefly on all files in a project is to run it from the project root:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-sh",children:"$ cd your/project\n$ pyrefly check\n"})}),"\n",(0,o.jsx)(i.p,{children:"Pyrefly is designed to have sensible defaults, and you may not need to configure it at all.\nHowever, projects with existing mypy configs may want to configure pyrefly to suit their own needs."}),"\n",(0,o.jsx)(i.h2,{id:"mypy-config-migration",children:"Mypy Config Migration"}),"\n",(0,o.jsx)(i.p,{children:"To make it as easy as possible to get started with pyrefly, we've provided a script for automatically migrating a mypy config to pyrefly."}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-sh",children:"$ pyrefly config-migration path/to/your/mypy.ini\n"})}),"\n",(0,o.jsxs)(i.p,{children:["This will load your existing ",(0,o.jsx)(i.code,{children:"mypy.ini"})," and transform it into a ",(0,o.jsx)(i.code,{children:"pyrefly.toml"})," while preserving as many options as possible. See ",(0,o.jsx)(i.code,{children:"config-migration --help"})," for more options."]}),"\n",(0,o.jsx)(i.p,{children:"We do recommend checking the resulting config for errors. While there is some overlap between mypy's config options and pyrefly's config options, it's not always possible to cleanly translate one config option to another."}),"\n",(0,o.jsxs)(i.p,{children:["If you'd rather start fresh with a hand-written config, please see the ",(0,o.jsx)(i.a,{href:"../configuration",children:"pyrefly configuration docs"}),". If you run into any issues with config migration, please ",(0,o.jsx)(i.a,{href:"https://github.com/facebook/pyrefly/issues",children:"let us know"}),"!"]}),"\n",(0,o.jsx)(i.h3,{id:"config-migration-details",children:"Config Migration Details"}),"\n",(0,o.jsxs)(i.p,{children:[(0,o.jsx)(i.code,{children:"files"}),", ",(0,o.jsx)(i.code,{children:"modules"}),", and ",(0,o.jsx)(i.code,{children:"packages"})," are combined into ",(0,o.jsx)(i.code,{children:"project_includes"}),". This should work exactly the same for ",(0,o.jsx)(i.code,{children:"files"})," and ",(0,o.jsx)(i.code,{children:"packages"}),". Mypy doesn't recurse into ",(0,o.jsx)(i.code,{children:"modules"}),", but pyrefly will."]}),"\n",(0,o.jsxs)(i.p,{children:["Pyrefly makes an effort to transform the ",(0,o.jsx)(i.code,{children:"exclude"})," regex into a list of filepath globs for ",(0,o.jsx)(i.code,{children:"project_excludes"}),". This should excel on simple regexes, such as ",(0,o.jsx)(i.code,{children:"some/file.py|exclude_dir/"}),", which becomes ",(0,o.jsx)(i.code,{children:'["**/some/file.py", "**/exclude_dir/"]'}),"."]}),"\n",(0,o.jsxs)(i.p,{children:["The ",(0,o.jsx)(i.code,{children:"ignore_missing_imports"})," per-module config option is turned into a list of modules. For example:"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-ini",children:"[mypy-some.*.module]\nignore_missing_imports = True\n"})}),"\n",(0,o.jsx)(i.p,{children:"Becomes:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-toml",children:'replace_imports_with_any = ["some.*.module"]\n'})}),"\n",(0,o.jsxs)(i.p,{children:["Pyrefly does support mypy's ",(0,o.jsx)(i.a,{href:"https://mypy.readthedocs.io/en/stable/config_file.html#config-file-format",children:"module name pattern syntax"}),"."]}),"\n",(0,o.jsxs)(i.p,{children:["Mypy's ",(0,o.jsx)(i.code,{children:"follow_untyped_imports"})," option is allowed to be global or per-module. The pyrefly equivalent, ",(0,o.jsx)(i.code,{children:"use_untyped_imports"}),", is only global. If any per-module section in the mypy config has ",(0,o.jsx)(i.code,{children:"follow_untyped_imports = True"}),", then ",(0,o.jsx)(i.code,{children:"use_untyped_imports"})," will be ",(0,o.jsx)(i.code,{children:"true"})," in the pyrefly config."]}),"\n",(0,o.jsx)(i.h2,{id:"silencing-errors",children:"Silencing Errors"}),"\n",(0,o.jsxs)(i.p,{children:["Like mypy, pyrefly has ways to silence specific error codes. Full details can be found in the ",(0,o.jsx)(i.a,{href:"../error-suppresions",children:"Error Suppression docs"})]}),"\n",(0,o.jsx)(i.p,{children:"To silence an error on a specific line, add a disable comment above that line:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"# pyrefly: ignore\nx: str = 1\n"})}),"\n",(0,o.jsx)(i.p,{children:"To suppress all instances of an error, disable that error in the config:"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{children:"[errors]\nimport-error = false\n"})}),"\n",(0,o.jsxs)(i.p,{children:["This is equivalent to mypy's ",(0,o.jsx)(i.code,{children:"disable_error_code"}),", though of course the ",(0,o.jsx)(i.a,{href:"../error-kinds",children:"error codes"})," are different!"]})]})}function p(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}}}]);